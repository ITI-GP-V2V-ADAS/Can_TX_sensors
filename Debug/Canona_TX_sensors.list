
Canona_TX_sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee8  08005ee8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef0  08005ef0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000060  08005f58  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005f58  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe68  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000241f  00000000  00000000  0002ff3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00032360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c0b  00000000  00000000  000332d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017143  00000000  00000000  00033edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011dcc  00000000  00000000  0004b01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009002b  00000000  00000000  0005cdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046e8  00000000  00000000  000ece18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000f1500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e68 	.word	0x08005e68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005e68 	.word	0x08005e68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
uint8_t CANSPI_Initialize(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000d76:	2300      	movs	r3, #0
 8000d78:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000d92:	2300      	movs	r3, #0
 8000d94:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000d96:	2300      	movs	r3, #0
 8000d98:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000da2:	2308      	movs	r3, #8
 8000da4:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000da6:	2300      	movs	r3, #0
 8000da8:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000daa:	2300      	movs	r3, #0
 8000dac:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000de2:	2308      	movs	r3, #8
 8000de4:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000dea:	2300      	movs	r3, #0
 8000dec:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8000dee:	f000 f931 	bl	8001054 <MCP2515_Initialize>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <CANSPI_Initialize+0x94>
    return -1;
 8000df8:	23ff      	movs	r3, #255	; 0xff
 8000dfa:	e058      	b.n	8000eae <CANSPI_Initialize+0x146>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000dfc:	f000 f94c 	bl	8001098 <MCP2515_SetConfigMode>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <CANSPI_Initialize+0xa2>
    return -2;
 8000e06:	23fe      	movs	r3, #254	; 0xfe
 8000e08:	e051      	b.n	8000eae <CANSPI_Initialize+0x146>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2123      	movs	r1, #35	; 0x23
 8000e10:	2020      	movs	r0, #32
 8000e12:	f000 f9c3 	bl	800119c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000e16:	463b      	mov	r3, r7
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2127      	movs	r1, #39	; 0x27
 8000e1c:	2024      	movs	r0, #36	; 0x24
 8000e1e:	f000 f9bd 	bl	800119c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	461a      	mov	r2, r3
 8000e28:	2103      	movs	r1, #3
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f9b6 	bl	800119c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000e30:	f107 0318 	add.w	r3, r7, #24
 8000e34:	461a      	mov	r2, r3
 8000e36:	2107      	movs	r1, #7
 8000e38:	2004      	movs	r0, #4
 8000e3a:	f000 f9af 	bl	800119c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	461a      	mov	r2, r3
 8000e44:	210b      	movs	r1, #11
 8000e46:	2008      	movs	r0, #8
 8000e48:	f000 f9a8 	bl	800119c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	461a      	mov	r2, r3
 8000e52:	2113      	movs	r1, #19
 8000e54:	2010      	movs	r0, #16
 8000e56:	f000 f9a1 	bl	800119c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2117      	movs	r1, #23
 8000e62:	2014      	movs	r0, #20
 8000e64:	f000 f99a 	bl	800119c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	211b      	movs	r1, #27
 8000e70:	2018      	movs	r0, #24
 8000e72:	f000 f993 	bl	800119c <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000e76:	2104      	movs	r1, #4
 8000e78:	2060      	movs	r0, #96	; 0x60
 8000e7a:	f000 f96b 	bl	8001154 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2070      	movs	r0, #112	; 0x70
 8000e82:	f000 f967 	bl	8001154 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000e86:	2100      	movs	r1, #0
 8000e88:	202a      	movs	r0, #42	; 0x2a
 8000e8a:	f000 f963 	bl	8001154 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000e8e:	21e5      	movs	r1, #229	; 0xe5
 8000e90:	2029      	movs	r0, #41	; 0x29
 8000e92:	f000 f95f 	bl	8001154 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000e96:	2183      	movs	r1, #131	; 0x83
 8000e98:	2028      	movs	r0, #40	; 0x28
 8000e9a:	f000 f95b 	bl	8001154 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000e9e:	f000 f919 	bl	80010d4 <MCP2515_SetNormalMode>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <CANSPI_Initialize+0x144>
    return -3;
 8000ea8:	23fd      	movs	r3, #253	; 0xfd
 8000eaa:	e000      	b.n	8000eae <CANSPI_Initialize+0x146>

  return 1;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <CANSPI_Transmit>:


/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000ed0:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000edc:	f000 f9cc 	bl	8001278 <MCP2515_ReadStatus>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000ee6:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d115      	bne.n	8000f22 <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6858      	ldr	r0, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000f00:	4619      	mov	r1, r3
 8000f02:	f000 f851 	bl	8000fa8 <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7a1a      	ldrb	r2, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3309      	adds	r3, #9
 8000f0e:	4924      	ldr	r1, [pc, #144]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000f10:	2040      	movs	r0, #64	; 0x40
 8000f12:	f000 f96d 	bl	80011f0 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000f16:	2081      	movs	r0, #129	; 0x81
 8000f18:	f000 f994 	bl	8001244 <MCP2515_RequestToSend>

    returnValue = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e038      	b.n	8000f94 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d115      	bne.n	8000f5c <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6858      	ldr	r0, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f000 f834 	bl	8000fa8 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7a1a      	ldrb	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3309      	adds	r3, #9
 8000f48:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000f4a:	2042      	movs	r0, #66	; 0x42
 8000f4c:	f000 f950 	bl	80011f0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000f50:	2082      	movs	r0, #130	; 0x82
 8000f52:	f000 f977 	bl	8001244 <MCP2515_RequestToSend>

    returnValue = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e01b      	b.n	8000f94 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d114      	bne.n	8000f94 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6858      	ldr	r0, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000f74:	4619      	mov	r1, r3
 8000f76:	f000 f817 	bl	8000fa8 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7a1a      	ldrb	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3309      	adds	r3, #9
 8000f82:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <CANSPI_Transmit+0xe8>)
 8000f84:	2044      	movs	r0, #68	; 0x44
 8000f86:	f000 f933 	bl	80011f0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000f8a:	2084      	movs	r0, #132	; 0x84
 8000f8c:	f000 f95a 	bl	8001244 <MCP2515_RequestToSend>

    returnValue = 1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000080 	.word	0x20000080
 8000fa4:	2000007c 	.word	0x2000007c

08000fa8 <convertCANid2Reg>:
  return (returnValue);
}

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d12e      	bne.n	800101e <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f023 031f 	bic.w	r3, r3, #31
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	7dfb      	ldrb	r3, [r7, #23]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	3308      	adds	r3, #8
 8001000:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	f023 0314 	bic.w	r3, r3, #20
 8001008:	b2da      	uxtb	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800101c:	e013      	b.n	8001046 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	015b      	lsls	r3, r3, #5
 800102e:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	701a      	strb	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
uint8_t MCP2515_Initialize(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800105a:	2201      	movs	r2, #1
 800105c:	2110      	movs	r1, #16
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <MCP2515_Initialize+0x3c>)
 8001060:	f001 fdfa 	bl	8002c58 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8001064:	230a      	movs	r3, #10
 8001066:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <MCP2515_Initialize+0x40>)
 800106a:	f002 fedf 	bl	8003e2c <HAL_SPI_GetState>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <MCP2515_Initialize+0x24>
      return 1;
 8001074:	2301      	movs	r3, #1
 8001076:	e006      	b.n	8001086 <MCP2515_Initialize+0x32>

    loop--;
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	3b01      	subs	r3, #1
 800107c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f1      	bne.n	8001068 <MCP2515_Initialize+0x14>

  return -1;
 8001084:	23ff      	movs	r3, #255	; 0xff
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020000 	.word	0x40020000
 8001094:	200000a4 	.word	0x200000a4

08001098 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
uint8_t MCP2515_SetConfigMode(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	200f      	movs	r0, #15
 80010a2:	f000 f857 	bl	8001154 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80010a6:	230a      	movs	r3, #10
 80010a8:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80010aa:	200e      	movs	r0, #14
 80010ac:	f000 f830 	bl	8001110 <MCP2515_ReadByte>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80010b6:	2b80      	cmp	r3, #128	; 0x80
 80010b8:	d101      	bne.n	80010be <MCP2515_SetConfigMode+0x26>
      return 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e006      	b.n	80010cc <MCP2515_SetConfigMode+0x34>

    loop--;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1ef      	bne.n	80010aa <MCP2515_SetConfigMode+0x12>

  return -1;
 80010ca:	23ff      	movs	r3, #255	; 0xff
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
uint8_t MCP2515_SetNormalMode(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80010da:	2100      	movs	r1, #0
 80010dc:	200f      	movs	r0, #15
 80010de:	f000 f839 	bl	8001154 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80010e2:	230a      	movs	r3, #10
 80010e4:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80010e6:	200e      	movs	r0, #14
 80010e8:	f000 f812 	bl	8001110 <MCP2515_ReadByte>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <MCP2515_SetNormalMode+0x26>
      return 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e006      	b.n	8001108 <MCP2515_SetNormalMode+0x34>

    loop--;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1ef      	bne.n	80010e6 <MCP2515_SetNormalMode+0x12>

  return -1;
 8001106:	23ff      	movs	r3, #255	; 0xff
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <MCP2515_ReadByte+0x40>)
 8001120:	f001 fd9a 	bl	8002c58 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f8c3 	bl	80012b0 <SPI_Tx>
  SPI_Tx(address);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f8bf 	bl	80012b0 <SPI_Tx>
  retVal = SPI_Rx();
 8001132:	f000 f8e3 	bl	80012fc <SPI_Rx>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 800113a:	2201      	movs	r2, #1
 800113c:	2110      	movs	r1, #16
 800113e:	4804      	ldr	r0, [pc, #16]	; (8001150 <MCP2515_ReadByte+0x40>)
 8001140:	f001 fd8a 	bl	8002c58 <HAL_GPIO_WritePin>

  return retVal;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40020000 	.word	0x40020000

08001154 <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001164:	2200      	movs	r2, #0
 8001166:	2110      	movs	r1, #16
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <MCP2515_WriteByte+0x44>)
 800116a:	f001 fd75 	bl	8002c58 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800116e:	2002      	movs	r0, #2
 8001170:	f000 f89e 	bl	80012b0 <SPI_Tx>
  SPI_Tx(address);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f89a 	bl	80012b0 <SPI_Tx>
  SPI_Tx(data);
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f896 	bl	80012b0 <SPI_Tx>

  MCP2515_CS_HIGH();
 8001184:	2201      	movs	r2, #1
 8001186:	2110      	movs	r1, #16
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <MCP2515_WriteByte+0x44>)
 800118a:	f001 fd65 	bl	8002c58 <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000

0800119c <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	603a      	str	r2, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80011ac:	2200      	movs	r2, #0
 80011ae:	2110      	movs	r1, #16
 80011b0:	480e      	ldr	r0, [pc, #56]	; (80011ec <MCP2515_WriteByteSequence+0x50>)
 80011b2:	f001 fd51 	bl	8002c58 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f000 f87a 	bl	80012b0 <SPI_Tx>
  SPI_Tx(startAddress);
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f876 	bl	80012b0 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80011c4:	79ba      	ldrb	r2, [r7, #6]
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4619      	mov	r1, r3
 80011d2:	6838      	ldr	r0, [r7, #0]
 80011d4:	f000 f87e 	bl	80012d4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80011d8:	2201      	movs	r2, #1
 80011da:	2110      	movs	r1, #16
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <MCP2515_WriteByteSequence+0x50>)
 80011de:	f001 fd3b 	bl	8002c58 <HAL_GPIO_WritePin>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020000 	.word	0x40020000

080011f0 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	4613      	mov	r3, r2
 8001200:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8001202:	2200      	movs	r2, #0
 8001204:	2110      	movs	r1, #16
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MCP2515_LoadTxSequence+0x50>)
 8001208:	f001 fd26 	bl	8002c58 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f84e 	bl	80012b0 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001214:	2104      	movs	r1, #4
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f000 f85c 	bl	80012d4 <SPI_TxBuffer>
  SPI_Tx(dlc);
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f846 	bl	80012b0 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	4619      	mov	r1, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f853 	bl	80012d4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800122e:	2201      	movs	r2, #1
 8001230:	2110      	movs	r1, #16
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <MCP2515_LoadTxSequence+0x50>)
 8001234:	f001 fd10 	bl	8002c58 <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40020000 	.word	0x40020000

08001244 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800124e:	2200      	movs	r2, #0
 8001250:	2110      	movs	r1, #16
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <MCP2515_RequestToSend+0x30>)
 8001254:	f001 fd00 	bl	8002c58 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f828 	bl	80012b0 <SPI_Tx>

  MCP2515_CS_HIGH();
 8001260:	2201      	movs	r2, #1
 8001262:	2110      	movs	r1, #16
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <MCP2515_RequestToSend+0x30>)
 8001266:	f001 fcf7 	bl	8002c58 <HAL_GPIO_WritePin>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020000 	.word	0x40020000

08001278 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800127e:	2200      	movs	r2, #0
 8001280:	2110      	movs	r1, #16
 8001282:	480a      	ldr	r0, [pc, #40]	; (80012ac <MCP2515_ReadStatus+0x34>)
 8001284:	f001 fce8 	bl	8002c58 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8001288:	20a0      	movs	r0, #160	; 0xa0
 800128a:	f000 f811 	bl	80012b0 <SPI_Tx>
  retVal = SPI_Rx();
 800128e:	f000 f835 	bl	80012fc <SPI_Rx>
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8001296:	2201      	movs	r2, #1
 8001298:	2110      	movs	r1, #16
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <MCP2515_ReadStatus+0x34>)
 800129c:	f001 fcdc 	bl	8002c58 <HAL_GPIO_WritePin>

  return retVal;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020000 	.word	0x40020000

080012b0 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80012ba:	1df9      	adds	r1, r7, #7
 80012bc:	230a      	movs	r3, #10
 80012be:	2201      	movs	r2, #1
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <SPI_Tx+0x20>)
 80012c2:	f002 f9c4 	bl	800364e <HAL_SPI_Transmit>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000a4 	.word	0x200000a4

080012d4 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	230a      	movs	r3, #10
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <SPI_TxBuffer+0x24>)
 80012ea:	f002 f9b0 	bl	800364e <HAL_SPI_Transmit>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200000a4 	.word	0x200000a4

080012fc <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001302:	1df9      	adds	r1, r7, #7
 8001304:	230a      	movs	r3, #10
 8001306:	2201      	movs	r2, #1
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <SPI_Rx+0x1c>)
 800130a:	f002 fadc 	bl	80038c6 <HAL_SPI_Receive>
  return retVal;
 800130e:	79fb      	ldrb	r3, [r7, #7]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200000a4 	.word	0x200000a4

0800131c <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <DWT_Delay_Init+0x58>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4a13      	ldr	r2, [pc, #76]	; (8001374 <DWT_Delay_Init+0x58>)
 8001326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800132a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <DWT_Delay_Init+0x58>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4a10      	ldr	r2, [pc, #64]	; (8001374 <DWT_Delay_Init+0x58>)
 8001332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001336:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <DWT_Delay_Init+0x5c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <DWT_Delay_Init+0x5c>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <DWT_Delay_Init+0x5c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <DWT_Delay_Init+0x5c>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <DWT_Delay_Init+0x5c>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8001356:	bf00      	nop
  __NOP();
 8001358:	bf00      	nop
  __NOP();
 800135a:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <DWT_Delay_Init+0x5c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e000      	b.n	800136a <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8001368:	2301      	movs	r3, #1
  }
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000edf0 	.word	0xe000edf0
 8001378:	e0001000 	.word	0xe0001000

0800137c <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <DWT_Delay_us+0x40>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800138a:	f002 f8a3 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 800138e:	4603      	mov	r3, r0
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <DWT_Delay_us+0x44>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 80013a0:	bf00      	nop
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <DWT_Delay_us+0x40>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1ad2      	subs	r2, r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3f8      	bcc.n	80013a2 <DWT_Delay_us+0x26>
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e0001000 	.word	0xe0001000
 80013c0:	431bde83 	.word	0x431bde83

080013c4 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <lcd16x2_enablePulse+0x34>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <lcd16x2_enablePulse+0x38>)
 80013ce:	8811      	ldrh	r1, [r2, #0]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fc40 	bl	8002c58 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 80013d8:	2014      	movs	r0, #20
 80013da:	f7ff ffcf 	bl	800137c <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <lcd16x2_enablePulse+0x34>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a06      	ldr	r2, [pc, #24]	; (80013fc <lcd16x2_enablePulse+0x38>)
 80013e4:	8811      	ldrh	r1, [r2, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 fc35 	bl	8002c58 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80013ee:	203c      	movs	r0, #60	; 0x3c
 80013f0:	f7ff ffc4 	bl	800137c <DWT_Delay_us>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000084 	.word	0x20000084
 80013fc:	2000008a 	.word	0x2000008a

08001400 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <lcd16x2_rs+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <lcd16x2_rs+0x28>)
 8001410:	8811      	ldrh	r1, [r2, #0]
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f001 fc1f 	bl	8002c58 <HAL_GPIO_WritePin>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000084 	.word	0x20000084
 8001428:	20000088 	.word	0x20000088

0800142c <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8001444:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <lcd16x2_write+0x198>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d05a      	beq.n	8001502 <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800144c:	4b5e      	ldr	r3, [pc, #376]	; (80015c8 <lcd16x2_write+0x19c>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	4b5e      	ldr	r3, [pc, #376]	; (80015cc <lcd16x2_write+0x1a0>)
 8001452:	8819      	ldrh	r1, [r3, #0]
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	f001 fbfb 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001462:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <lcd16x2_write+0x19c>)
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <lcd16x2_write+0x1a4>)
 8001468:	8819      	ldrh	r1, [r3, #0]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	f001 fbf0 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001478:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <lcd16x2_write+0x19c>)
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <lcd16x2_write+0x1a8>)
 800147e:	8819      	ldrh	r1, [r3, #0]
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	f001 fbe5 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800148e:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <lcd16x2_write+0x19c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <lcd16x2_write+0x1ac>)
 8001494:	8819      	ldrh	r1, [r3, #0]
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	f001 fbda 	bl	8002c58 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80014a4:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <lcd16x2_write+0x1b0>)
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <lcd16x2_write+0x1b4>)
 80014aa:	8819      	ldrh	r1, [r3, #0]
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	f001 fbcf 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80014ba:	4b48      	ldr	r3, [pc, #288]	; (80015dc <lcd16x2_write+0x1b0>)
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <lcd16x2_write+0x1b8>)
 80014c0:	8819      	ldrh	r1, [r3, #0]
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	f001 fbc4 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80014d0:	4b42      	ldr	r3, [pc, #264]	; (80015dc <lcd16x2_write+0x1b0>)
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <lcd16x2_write+0x1bc>)
 80014d6:	8819      	ldrh	r1, [r3, #0]
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	f001 fbb9 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <lcd16x2_write+0x1b0>)
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <lcd16x2_write+0x1c0>)
 80014ec:	8819      	ldrh	r1, [r3, #0]
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	f001 fbae 	bl	8002c58 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80014fc:	f7ff ff62 	bl	80013c4 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8001500:	e05b      	b.n	80015ba <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <lcd16x2_write+0x1b0>)
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <lcd16x2_write+0x1b4>)
 8001508:	8819      	ldrh	r1, [r3, #0]
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	f001 fba0 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <lcd16x2_write+0x1b0>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <lcd16x2_write+0x1b8>)
 800151e:	8819      	ldrh	r1, [r3, #0]
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	f001 fb95 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <lcd16x2_write+0x1b0>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <lcd16x2_write+0x1bc>)
 8001534:	8819      	ldrh	r1, [r3, #0]
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	f001 fb8a 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <lcd16x2_write+0x1b0>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <lcd16x2_write+0x1c0>)
 800154a:	8819      	ldrh	r1, [r3, #0]
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	f001 fb7f 	bl	8002c58 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800155a:	f7ff ff33 	bl	80013c4 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <lcd16x2_write+0x1b0>)
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <lcd16x2_write+0x1b4>)
 8001564:	8819      	ldrh	r1, [r3, #0]
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	f001 fb72 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <lcd16x2_write+0x1b0>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <lcd16x2_write+0x1b8>)
 800157a:	8819      	ldrh	r1, [r3, #0]
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	f001 fb67 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <lcd16x2_write+0x1b0>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <lcd16x2_write+0x1bc>)
 8001590:	8819      	ldrh	r1, [r3, #0]
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	f001 fb5c 	bl	8002c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <lcd16x2_write+0x1b0>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <lcd16x2_write+0x1c0>)
 80015a6:	8819      	ldrh	r1, [r3, #0]
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	f001 fb51 	bl	8002c58 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80015b6:	f7ff ff05 	bl	80013c4 <lcd16x2_enablePulse>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000000 	.word	0x20000000
 80015c8:	2000008c 	.word	0x2000008c
 80015cc:	20000090 	.word	0x20000090
 80015d0:	20000092 	.word	0x20000092
 80015d4:	20000094 	.word	0x20000094
 80015d8:	20000096 	.word	0x20000096
 80015dc:	20000098 	.word	0x20000098
 80015e0:	2000009c 	.word	0x2000009c
 80015e4:	2000009e 	.word	0x2000009e
 80015e8:	200000a0 	.word	0x200000a0
 80015ec:	200000a2 	.word	0x200000a2

080015f0 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff ff00 	bl	8001400 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff12 	bl	800142c <lcd16x2_write>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff fef0 	bl	8001400 <lcd16x2_rs>
  lcd16x2_write(data);
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff02 	bl	800142c <lcd16x2_write>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <lcd16x2_init_8bits>:
 */
void lcd16x2_init_8bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_0_3, uint16_t d0_pin, uint16_t d1_pin, uint16_t d2_pin, uint16_t d3_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	817b      	strh	r3, [r7, #10]
 800163e:	4613      	mov	r3, r2
 8001640:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8001642:	f7ff fe6b 	bl	800131c <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8001646:	4a29      	ldr	r2, [pc, #164]	; (80016ec <lcd16x2_init_8bits+0xbc>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 800164c:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <lcd16x2_init_8bits+0xc0>)
 800164e:	897b      	ldrh	r3, [r7, #10]
 8001650:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8001652:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <lcd16x2_init_8bits+0xc4>)
 8001654:	893b      	ldrh	r3, [r7, #8]
 8001656:	8013      	strh	r3, [r2, #0]
  PORT_LSB = port_0_3;
 8001658:	4a27      	ldr	r2, [pc, #156]	; (80016f8 <lcd16x2_init_8bits+0xc8>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  D0_PIN = d0_pin;
 800165e:	4a27      	ldr	r2, [pc, #156]	; (80016fc <lcd16x2_init_8bits+0xcc>)
 8001660:	8b3b      	ldrh	r3, [r7, #24]
 8001662:	8013      	strh	r3, [r2, #0]
  D1_PIN = d1_pin;
 8001664:	4a26      	ldr	r2, [pc, #152]	; (8001700 <lcd16x2_init_8bits+0xd0>)
 8001666:	8bbb      	ldrh	r3, [r7, #28]
 8001668:	8013      	strh	r3, [r2, #0]
  D2_PIN = d2_pin;
 800166a:	4a26      	ldr	r2, [pc, #152]	; (8001704 <lcd16x2_init_8bits+0xd4>)
 800166c:	8c3b      	ldrh	r3, [r7, #32]
 800166e:	8013      	strh	r3, [r2, #0]
  D3_PIN = d3_pin;
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <lcd16x2_init_8bits+0xd8>)
 8001672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001674:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8001676:	4a25      	ldr	r2, [pc, #148]	; (800170c <lcd16x2_init_8bits+0xdc>)
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 800167c:	4a24      	ldr	r2, [pc, #144]	; (8001710 <lcd16x2_init_8bits+0xe0>)
 800167e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001680:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8001682:	4a24      	ldr	r2, [pc, #144]	; (8001714 <lcd16x2_init_8bits+0xe4>)
 8001684:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001686:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001688:	4a23      	ldr	r2, [pc, #140]	; (8001718 <lcd16x2_init_8bits+0xe8>)
 800168a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800168c:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 800168e:	4a23      	ldr	r2, [pc, #140]	; (800171c <lcd16x2_init_8bits+0xec>)
 8001690:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001692:	8013      	strh	r3, [r2, #0]
  is8BitsMode = true;
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <lcd16x2_init_8bits+0xf0>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x38;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <lcd16x2_init_8bits+0xf4>)
 800169c:	2238      	movs	r2, #56	; 0x38
 800169e:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80016a0:	2014      	movs	r0, #20
 80016a2:	f001 f807 	bl	80026b4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_writeCommand(0x30);
 80016a6:	2030      	movs	r0, #48	; 0x30
 80016a8:	f7ff ffa2 	bl	80015f0 <lcd16x2_writeCommand>
  LCD_MS_DELAY(5);
 80016ac:	2005      	movs	r0, #5
 80016ae:	f001 f801 	bl	80026b4 <HAL_Delay>
  lcd16x2_writeCommand(0x30);
 80016b2:	2030      	movs	r0, #48	; 0x30
 80016b4:	f7ff ff9c 	bl	80015f0 <lcd16x2_writeCommand>
  LCD_MS_DELAY(1);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f000 fffb 	bl	80026b4 <HAL_Delay>
  lcd16x2_writeCommand(0x30);
 80016be:	2030      	movs	r0, #48	; 0x30
 80016c0:	f7ff ff96 	bl	80015f0 <lcd16x2_writeCommand>
  LCD_MS_DELAY(1);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f000 fff5 	bl	80026b4 <HAL_Delay>
  //3. Function set; Enable 2 lines, Data length to 8 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 80016ca:	2038      	movs	r0, #56	; 0x38
 80016cc:	f7ff ff90 	bl	80015f0 <lcd16x2_writeCommand>
  //4. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80016d0:	200f      	movs	r0, #15
 80016d2:	f7ff ff8d 	bl	80015f0 <lcd16x2_writeCommand>
  //5. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff ff8a 	bl	80015f0 <lcd16x2_writeCommand>
  LCD_MS_DELAY(2);
 80016dc:	2002      	movs	r0, #2
 80016de:	f000 ffe9 	bl	80026b4 <HAL_Delay>
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000084 	.word	0x20000084
 80016f0:	20000088 	.word	0x20000088
 80016f4:	2000008a 	.word	0x2000008a
 80016f8:	2000008c 	.word	0x2000008c
 80016fc:	20000090 	.word	0x20000090
 8001700:	20000092 	.word	0x20000092
 8001704:	20000094 	.word	0x20000094
 8001708:	20000096 	.word	0x20000096
 800170c:	20000098 	.word	0x20000098
 8001710:	2000009c 	.word	0x2000009c
 8001714:	2000009e 	.word	0x2000009e
 8001718:	200000a0 	.word	0x200000a0
 800171c:	200000a2 	.word	0x200000a2
 8001720:	20000000 	.word	0x20000000
 8001724:	20000001 	.word	0x20000001

08001728 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	460a      	mov	r2, r1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	4613      	mov	r3, r2
 8001736:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800174c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff4d 	bl	80015f0 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8001756:	e007      	b.n	8001768 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800175e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff44 	bl	80015f0 <lcd16x2_writeCommand>
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001774:	2100      	movs	r1, #0
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff ffd6 	bl	8001728 <lcd16x2_setCursor>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001784:	2100      	movs	r1, #0
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff ffce 	bl	8001728 <lcd16x2_setCursor>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff ff2b 	bl	80015f0 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 800179a:	2003      	movs	r0, #3
 800179c:	f000 ff8a 	bl	80026b4 <HAL_Delay>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 80017a4:	b40f      	push	{r0, r1, r2, r3}
 80017a6:	b590      	push	{r4, r7, lr}
 80017a8:	b089      	sub	sp, #36	; 0x24
 80017aa:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80017ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b0:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fec6 	bl	800554c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	77fb      	strb	r3, [r7, #31]
 80017c4:	e00a      	b.n	80017dc <lcd16x2_printf+0x38>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	3320      	adds	r3, #32
 80017ca:	443b      	add	r3, r7
 80017cc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff1d 	bl	8001610 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	3301      	adds	r3, #1
 80017da:	77fb      	strb	r3, [r7, #31]
 80017dc:	7ffc      	ldrb	r4, [r7, #31]
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fcfc 	bl	80001e0 <strlen>
 80017e8:	4603      	mov	r3, r0
 80017ea:	429c      	cmp	r4, r3
 80017ec:	d202      	bcs.n	80017f4 <lcd16x2_printf+0x50>
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d9e8      	bls.n	80017c6 <lcd16x2_printf+0x22>
  }
}
 80017f4:	bf00      	nop
 80017f6:	3724      	adds	r7, #36	; 0x24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80017fe:	b004      	add	sp, #16
 8001800:	4770      	bx	lr
 8001802:	0000      	movs	r0, r0
 8001804:	0000      	movs	r0, r0
	...

08001808 <HAL_TIM_IC_CaptureCallback>:
uint8_t flag_3=0;
uint8_t flag_4=0;
uint8_t flag_5=0;
uint8_t UART_FLAgs[5]={0};
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7f1b      	ldrb	r3, [r3, #28]
 8001814:	2b01      	cmp	r3, #1
 8001816:	f040 80ac 	bne.w	8001972 <HAL_TIM_IC_CaptureCallback+0x16a>
	{
		if (Is_First_Captured_1==0) // if the first value is not captured
 800181a:	4b95      	ldr	r3, [pc, #596]	; (8001a70 <HAL_TIM_IC_CaptureCallback+0x268>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d11a      	bne.n	8001858 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001822:	2100      	movs	r1, #0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f003 f86d 	bl	8004904 <HAL_TIM_ReadCapturedValue>
 800182a:	4603      	mov	r3, r0
 800182c:	4a91      	ldr	r2, [pc, #580]	; (8001a74 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800182e:	6013      	str	r3, [r2, #0]
			Is_First_Captured_1 = 1;  // set the first captured as true
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6a1a      	ldr	r2, [r3, #32]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 020a 	bic.w	r2, r2, #10
 8001844:	621a      	str	r2, [r3, #32]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0202 	orr.w	r2, r2, #2
 8001854:	621a      	str	r2, [r3, #32]
	}




}
 8001856:	e1f6      	b.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x43e>
		else if (Is_First_Captured_1==1)   // if the first is already captured
 8001858:	4b85      	ldr	r3, [pc, #532]	; (8001a70 <HAL_TIM_IC_CaptureCallback+0x268>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	f040 81f2 	bne.w	8001c46 <HAL_TIM_IC_CaptureCallback+0x43e>
			IC_Val2_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001862:	2100      	movs	r1, #0
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f003 f84d 	bl	8004904 <HAL_TIM_ReadCapturedValue>
 800186a:	4603      	mov	r3, r0
 800186c:	4a82      	ldr	r2, [pc, #520]	; (8001a78 <HAL_TIM_IC_CaptureCallback+0x270>)
 800186e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_1 > IC_Val1_1)
 8001878:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <HAL_TIM_IC_CaptureCallback+0x270>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b7d      	ldr	r3, [pc, #500]	; (8001a74 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d907      	bls.n	8001894 <HAL_TIM_IC_CaptureCallback+0x8c>
				Difference_1 = IC_Val2_1-IC_Val1_1;
 8001884:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b7a      	ldr	r3, [pc, #488]	; (8001a74 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	4a7b      	ldr	r2, [pc, #492]	; (8001a7c <HAL_TIM_IC_CaptureCallback+0x274>)
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e00f      	b.n	80018b4 <HAL_TIM_IC_CaptureCallback+0xac>
			else if (IC_Val1_1 > IC_Val2_1)
 8001894:	4b77      	ldr	r3, [pc, #476]	; (8001a74 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b77      	ldr	r3, [pc, #476]	; (8001a78 <HAL_TIM_IC_CaptureCallback+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d909      	bls.n	80018b4 <HAL_TIM_IC_CaptureCallback+0xac>
				Difference_1 = (0xffff - IC_Val1_1) + IC_Val2_1;
 80018a0:	4b75      	ldr	r3, [pc, #468]	; (8001a78 <HAL_TIM_IC_CaptureCallback+0x270>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018ae:	33ff      	adds	r3, #255	; 0xff
 80018b0:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_TIM_IC_CaptureCallback+0x274>)
 80018b2:	6013      	str	r3, [r2, #0]
			Distance_1 = Difference_1 * .034/2;
 80018b4:	4b71      	ldr	r3, [pc, #452]	; (8001a7c <HAL_TIM_IC_CaptureCallback+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe2b 	bl	8000514 <__aeabi_ui2d>
 80018be:	a36a      	add	r3, pc, #424	; (adr r3, 8001a68 <HAL_TIM_IC_CaptureCallback+0x260>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fea0 	bl	8000608 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d8:	f7fe ffc0 	bl	800085c <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff f8a2 	bl	8000a2c <__aeabi_d2uiz>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <HAL_TIM_IC_CaptureCallback+0x278>)
 80018ee:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_1 = 0; // set it back to false
 80018f0:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_TIM_IC_CaptureCallback+0x268>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
			if(Distance_1 <= 80	&& Distance_1 > 60)			{
 80018f6:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <HAL_TIM_IC_CaptureCallback+0x278>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b50      	cmp	r3, #80	; 0x50
 80018fc:	d80a      	bhi.n	8001914 <HAL_TIM_IC_CaptureCallback+0x10c>
 80018fe:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b3c      	cmp	r3, #60	; 0x3c
 8001904:	d906      	bls.n	8001914 <HAL_TIM_IC_CaptureCallback+0x10c>
				flag_1=1;
 8001906:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
				flag_2=0;
 800190c:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <HAL_TIM_IC_CaptureCallback+0x280>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	e014      	b.n	800193e <HAL_TIM_IC_CaptureCallback+0x136>
			else if(Distance_1 <= 60)
 8001914:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b3c      	cmp	r3, #60	; 0x3c
 800191a:	d806      	bhi.n	800192a <HAL_TIM_IC_CaptureCallback+0x122>
				flag_2=1;
 800191c:	4b5a      	ldr	r3, [pc, #360]	; (8001a88 <HAL_TIM_IC_CaptureCallback+0x280>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
				flag_1=0;
 8001922:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e009      	b.n	800193e <HAL_TIM_IC_CaptureCallback+0x136>
			else if(Distance_1 > 80)
 800192a:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <HAL_TIM_IC_CaptureCallback+0x278>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b50      	cmp	r3, #80	; 0x50
 8001930:	d905      	bls.n	800193e <HAL_TIM_IC_CaptureCallback+0x136>
				flag_1=0;
 8001932:	4b54      	ldr	r3, [pc, #336]	; (8001a84 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
				flag_2=0;
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_TIM_IC_CaptureCallback+0x280>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a1a      	ldr	r2, [r3, #32]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 020a 	bic.w	r2, r2, #10
 800194c:	621a      	str	r2, [r3, #32]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a12      	ldr	r2, [r2, #32]
 8001958:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800195a:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <HAL_TIM_IC_CaptureCallback+0x284>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_TIM_IC_CaptureCallback+0x284>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0202 	bic.w	r2, r2, #2
 8001968:	60da      	str	r2, [r3, #12]
			flag=1;
 800196a:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_TIM_IC_CaptureCallback+0x288>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
}
 8001970:	e169      	b.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x43e>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7f1b      	ldrb	r3, [r3, #28]
 8001976:	2b02      	cmp	r3, #2
 8001978:	f040 80b5 	bne.w	8001ae6 <HAL_TIM_IC_CaptureCallback+0x2de>
		if (Is_First_Captured_2==0) // if the first value is not captured
 800197c:	4b45      	ldr	r3, [pc, #276]	; (8001a94 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d11a      	bne.n	80019ba <HAL_TIM_IC_CaptureCallback+0x1b2>
			IC_Val1_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001984:	2104      	movs	r1, #4
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f002 ffbc 	bl	8004904 <HAL_TIM_ReadCapturedValue>
 800198c:	4603      	mov	r3, r0
 800198e:	4a42      	ldr	r2, [pc, #264]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001990:	6013      	str	r3, [r2, #0]
			Is_First_Captured_2 = 1;  // set the first captured as true
 8001992:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a1a      	ldr	r2, [r3, #32]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019a6:	621a      	str	r2, [r3, #32]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a1a      	ldr	r2, [r3, #32]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0220 	orr.w	r2, r2, #32
 80019b6:	621a      	str	r2, [r3, #32]
}
 80019b8:	e145      	b.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x43e>
		else if (Is_First_Captured_2==1)   // if the first is already captured
 80019ba:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	f040 8141 	bne.w	8001c46 <HAL_TIM_IC_CaptureCallback+0x43e>
			IC_Val2_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80019c4:	2104      	movs	r1, #4
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f002 ff9c 	bl	8004904 <HAL_TIM_ReadCapturedValue>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a33      	ldr	r2, [pc, #204]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0x294>)
 80019d0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_2 > IC_Val1_2)
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0x294>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x290>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d907      	bls.n	80019f6 <HAL_TIM_IC_CaptureCallback+0x1ee>
				Difference_2 = IC_Val2_2-IC_Val1_2;
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0x294>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x290>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a2b      	ldr	r2, [pc, #172]	; (8001aa0 <HAL_TIM_IC_CaptureCallback+0x298>)
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e00f      	b.n	8001a16 <HAL_TIM_IC_CaptureCallback+0x20e>
			else if (IC_Val1_2 > IC_Val2_2)
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x290>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0x294>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d909      	bls.n	8001a16 <HAL_TIM_IC_CaptureCallback+0x20e>
				Difference_2 = (0xffff - IC_Val1_2) + IC_Val2_2;
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0x294>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a10:	33ff      	adds	r3, #255	; 0xff
 8001a12:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001a14:	6013      	str	r3, [r2, #0]
			Distance_2 = Difference_2 * .034/2;
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd7a 	bl	8000514 <__aeabi_ui2d>
 8001a20:	a311      	add	r3, pc, #68	; (adr r3, 8001a68 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fdef 	bl	8000608 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3a:	f7fe ff0f 	bl	800085c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7fe fff1 	bl	8000a2c <__aeabi_d2uiz>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001a50:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_2 = 0; // set it back to false
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
			if(Distance_2 <=20)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b14      	cmp	r3, #20
 8001a5e:	d825      	bhi.n	8001aac <HAL_TIM_IC_CaptureCallback+0x2a4>
				flag_3=1;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e024      	b.n	8001ab2 <HAL_TIM_IC_CaptureCallback+0x2aa>
 8001a68:	b020c49c 	.word	0xb020c49c
 8001a6c:	3fa16872 	.word	0x3fa16872
 8001a70:	200001a8 	.word	0x200001a8
 8001a74:	2000019c 	.word	0x2000019c
 8001a78:	200001a0 	.word	0x200001a0
 8001a7c:	200001a4 	.word	0x200001a4
 8001a80:	200001a9 	.word	0x200001a9
 8001a84:	200001cc 	.word	0x200001cc
 8001a88:	200001cd 	.word	0x200001cd
 8001a8c:	200000fc 	.word	0x200000fc
 8001a90:	200001ca 	.word	0x200001ca
 8001a94:	200001b8 	.word	0x200001b8
 8001a98:	200001ac 	.word	0x200001ac
 8001a9c:	200001b0 	.word	0x200001b0
 8001aa0:	200001b4 	.word	0x200001b4
 8001aa4:	200001b9 	.word	0x200001b9
 8001aa8:	200001ce 	.word	0x200001ce
				flag_3=0;
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_TIM_IC_CaptureCallback+0x450>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a1a      	ldr	r2, [r3, #32]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ac0:	621a      	str	r2, [r3, #32]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6a12      	ldr	r2, [r2, #32]
 8001acc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x454>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x454>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0204 	bic.w	r2, r2, #4
 8001adc:	60da      	str	r2, [r3, #12]
			flag=2;
 8001ade:	4b60      	ldr	r3, [pc, #384]	; (8001c60 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
}
 8001ae4:	e0af      	b.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x43e>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7f1b      	ldrb	r3, [r3, #28]
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	f040 80ab 	bne.w	8001c46 <HAL_TIM_IC_CaptureCallback+0x43e>
		if (Is_First_Captured_3==0) // if the first value is not captured
 8001af0:	4b5c      	ldr	r3, [pc, #368]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11a      	bne.n	8001b2e <HAL_TIM_IC_CaptureCallback+0x326>
			IC_Val1_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8001af8:	2108      	movs	r1, #8
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f002 ff02 	bl	8004904 <HAL_TIM_ReadCapturedValue>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a59      	ldr	r2, [pc, #356]	; (8001c68 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001b04:	6013      	str	r3, [r2, #0]
			Is_First_Captured_3 = 1;  // set the first captured as true
 8001b06:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a1a      	ldr	r2, [r3, #32]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001b1a:	621a      	str	r2, [r3, #32]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a1a      	ldr	r2, [r3, #32]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2a:	621a      	str	r2, [r3, #32]
}
 8001b2c:	e08b      	b.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x43e>
		else if (Is_First_Captured_3==1)   // if the first is already captured
 8001b2e:	4b4d      	ldr	r3, [pc, #308]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	f040 8087 	bne.w	8001c46 <HAL_TIM_IC_CaptureCallback+0x43e>
			IC_Val2_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8001b38:	2108      	movs	r1, #8
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f002 fee2 	bl	8004904 <HAL_TIM_ReadCapturedValue>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x464>)
 8001b44:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_3 > IC_Val1_3)
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x464>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b45      	ldr	r3, [pc, #276]	; (8001c68 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d907      	bls.n	8001b6a <HAL_TIM_IC_CaptureCallback+0x362>
				Difference_3 = IC_Val2_3-IC_Val1_3;
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x464>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4a42      	ldr	r2, [pc, #264]	; (8001c70 <HAL_TIM_IC_CaptureCallback+0x468>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e00f      	b.n	8001b8a <HAL_TIM_IC_CaptureCallback+0x382>
			else if (IC_Val1_3 > IC_Val2_3)
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x464>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d909      	bls.n	8001b8a <HAL_TIM_IC_CaptureCallback+0x382>
				Difference_3 = (0xffff - IC_Val1_3) + IC_Val2_3;
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x464>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_TIM_IC_CaptureCallback+0x460>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b84:	33ff      	adds	r3, #255	; 0xff
 8001b86:	4a3a      	ldr	r2, [pc, #232]	; (8001c70 <HAL_TIM_IC_CaptureCallback+0x468>)
 8001b88:	6013      	str	r3, [r2, #0]
			Distance_3 = Difference_3 * .034/2;
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <HAL_TIM_IC_CaptureCallback+0x468>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcc0 	bl	8000514 <__aeabi_ui2d>
 8001b94:	a32e      	add	r3, pc, #184	; (adr r3, 8001c50 <HAL_TIM_IC_CaptureCallback+0x448>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fd35 	bl	8000608 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bae:	f7fe fe55 	bl	800085c <__aeabi_ddiv>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe ff37 	bl	8000a2c <__aeabi_d2uiz>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x46c>)
 8001bc4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_3 = 0; // set it back to false
 8001bc6:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
			if(Distance_3 <= 80 && Distance_3 > 60)
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x46c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b50      	cmp	r3, #80	; 0x50
 8001bd2:	d80a      	bhi.n	8001bea <HAL_TIM_IC_CaptureCallback+0x3e2>
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x46c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b3c      	cmp	r3, #60	; 0x3c
 8001bda:	d906      	bls.n	8001bea <HAL_TIM_IC_CaptureCallback+0x3e2>
				flag_4=1;
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_TIM_IC_CaptureCallback+0x470>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
				flag_5=0;
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x474>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e014      	b.n	8001c14 <HAL_TIM_IC_CaptureCallback+0x40c>
			else if(Distance_3 <= 60)
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x46c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b3c      	cmp	r3, #60	; 0x3c
 8001bf0:	d806      	bhi.n	8001c00 <HAL_TIM_IC_CaptureCallback+0x3f8>
				flag_5=1;
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x474>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
				flag_4=0;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <HAL_TIM_IC_CaptureCallback+0x470>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e009      	b.n	8001c14 <HAL_TIM_IC_CaptureCallback+0x40c>
			else if(Distance_3 > 80 )
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x46c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b50      	cmp	r3, #80	; 0x50
 8001c06:	d905      	bls.n	8001c14 <HAL_TIM_IC_CaptureCallback+0x40c>
				flag_4=0;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_TIM_IC_CaptureCallback+0x470>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
				flag_5=0;
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x474>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6a1a      	ldr	r2, [r3, #32]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001c22:	621a      	str	r2, [r3, #32]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a12      	ldr	r2, [r2, #32]
 8001c2e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x454>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x454>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0208 	bic.w	r2, r2, #8
 8001c3e:	60da      	str	r2, [r3, #12]
			flag=0;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_TIM_IC_CaptureCallback+0x458>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	b020c49c 	.word	0xb020c49c
 8001c54:	3fa16872 	.word	0x3fa16872
 8001c58:	200001ce 	.word	0x200001ce
 8001c5c:	200000fc 	.word	0x200000fc
 8001c60:	200001ca 	.word	0x200001ca
 8001c64:	200001c8 	.word	0x200001c8
 8001c68:	200001bc 	.word	0x200001bc
 8001c6c:	200001c0 	.word	0x200001c0
 8001c70:	200001c4 	.word	0x200001c4
 8001c74:	200001c9 	.word	0x200001c9
 8001c78:	200001cf 	.word	0x200001cf
 8001c7c:	200001d0 	.word	0x200001d0

08001c80 <HCSR04_Read_1>:

void HCSR04_Read_1(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	//if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))//skip sensor if ECHO pin is still busy
	//	{

	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001c84:	2201      	movs	r2, #1
 8001c86:	2101      	movs	r1, #1
 8001c88:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <HCSR04_Read_1+0x34>)
 8001c8a:	f000 ffe5 	bl	8002c58 <HAL_GPIO_WritePin>
	HAL_Delay(0.01);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 fd10 	bl	80026b4 <HAL_Delay>
	//delay(10);  // wait for 10 us
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c94:	2200      	movs	r2, #0
 8001c96:	2101      	movs	r1, #1
 8001c98:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <HCSR04_Read_1+0x34>)
 8001c9a:	f000 ffdd 	bl	8002c58 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HCSR04_Read_1+0x38>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <HCSR04_Read_1+0x38>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0202 	orr.w	r2, r2, #2
 8001cac:	60da      	str	r2, [r3, #12]
	// }
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	200000fc 	.word	0x200000fc

08001cbc <HCSR04_Read_2>:
void HCSR04_Read_2(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))//skip sensor if ECHO pin is still busy
 8001cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc4:	480e      	ldr	r0, [pc, #56]	; (8001d00 <HCSR04_Read_2+0x44>)
 8001cc6:	f000 ffaf 	bl	8002c28 <HAL_GPIO_ReadPin>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d114      	bne.n	8001cfa <HCSR04_Read_2+0x3e>
	{
		HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <HCSR04_Read_2+0x48>)
 8001cd6:	f000 ffbf 	bl	8002c58 <HAL_GPIO_WritePin>
		HAL_Delay(0.01);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 fcea 	bl	80026b4 <HAL_Delay>
		//delay(10);  // wait for 10 us
		HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	4807      	ldr	r0, [pc, #28]	; (8001d04 <HCSR04_Read_2+0x48>)
 8001ce6:	f000 ffb7 	bl	8002c58 <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <HCSR04_Read_2+0x4c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HCSR04_Read_2+0x4c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0204 	orr.w	r2, r2, #4
 8001cf8:	60da      	str	r2, [r3, #12]
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020000 	.word	0x40020000
 8001d08:	200000fc 	.word	0x200000fc

08001d0c <HCSR04_Read_3>:
void HCSR04_Read_3(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))//skip sensor if ECHO pin is still busy
 8001d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d14:	480e      	ldr	r0, [pc, #56]	; (8001d50 <HCSR04_Read_3+0x44>)
 8001d16:	f000 ff87 	bl	8002c28 <HAL_GPIO_ReadPin>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d114      	bne.n	8001d4a <HCSR04_Read_3+0x3e>
	{
		HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001d20:	2201      	movs	r2, #1
 8001d22:	2104      	movs	r1, #4
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <HCSR04_Read_3+0x48>)
 8001d26:	f000 ff97 	bl	8002c58 <HAL_GPIO_WritePin>
		HAL_Delay(0.01);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f000 fcc2 	bl	80026b4 <HAL_Delay>
		//delay(10);  // wait for 10 us
		HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001d30:	2200      	movs	r2, #0
 8001d32:	2104      	movs	r1, #4
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <HCSR04_Read_3+0x48>)
 8001d36:	f000 ff8f 	bl	8002c58 <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HCSR04_Read_3+0x4c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HCSR04_Read_3+0x4c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0208 	orr.w	r2, r2, #8
 8001d48:	60da      	str	r2, [r3, #12]
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020000 	.word	0x40020000
 8001d58:	200000fc 	.word	0x200000fc

08001d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b08d      	sub	sp, #52	; 0x34
 8001d60:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d62:	f000 fc35 	bl	80025d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d66:	f000 f8d1 	bl	8001f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6a:	f000 fa23 	bl	80021b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d6e:	f000 f937 	bl	8001fe0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001d72:	f000 f96b 	bl	800204c <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001d76:	f000 f9f3 	bl	8002160 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_IC_Init(&htim1);
 8001d7a:	4855      	ldr	r0, [pc, #340]	; (8001ed0 <main+0x174>)
 8001d7c:	f002 f9e3 	bl	8004146 <HAL_TIM_IC_Init>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001d80:	2100      	movs	r1, #0
 8001d82:	4853      	ldr	r0, [pc, #332]	; (8001ed0 <main+0x174>)
 8001d84:	f002 fa38 	bl	80041f8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001d88:	2104      	movs	r1, #4
 8001d8a:	4851      	ldr	r0, [pc, #324]	; (8001ed0 <main+0x174>)
 8001d8c:	f002 fa34 	bl	80041f8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001d90:	2108      	movs	r1, #8
 8001d92:	484f      	ldr	r0, [pc, #316]	; (8001ed0 <main+0x174>)
 8001d94:	f002 fa30 	bl	80041f8 <HAL_TIM_IC_Start_IT>
	lcd16x2_init_8bits( GPIOB, GPIO_PIN_1, GPIO_PIN_2, GPIOB,  GPIO_PIN_3,  GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIOB, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10);
 8001d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d9c:	9308      	str	r3, [sp, #32]
 8001d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da2:	9307      	str	r3, [sp, #28]
 8001da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da8:	9306      	str	r3, [sp, #24]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	9305      	str	r3, [sp, #20]
 8001dae:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <main+0x178>)
 8001db0:	9304      	str	r3, [sp, #16]
 8001db2:	2340      	movs	r3, #64	; 0x40
 8001db4:	9303      	str	r3, [sp, #12]
 8001db6:	2320      	movs	r3, #32
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	2310      	movs	r3, #16
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <main+0x178>)
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	4842      	ldr	r0, [pc, #264]	; (8001ed4 <main+0x178>)
 8001dca:	f7ff fc31 	bl	8001630 <lcd16x2_init_8bits>
	lcd16x2_clear();
 8001dce:	f7ff fcdf 	bl	8001790 <lcd16x2_clear>

	int ret;
	ret = CANSPI_Initialize();
 8001dd2:	f7fe ffc9 	bl	8000d68 <CANSPI_Initialize>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	607b      	str	r3, [r7, #4]
	if(!ret){
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <main+0x90>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2101      	movs	r1, #1
 8001de4:	483b      	ldr	r0, [pc, #236]	; (8001ed4 <main+0x178>)
 8001de6:	f000 ff37 	bl	8002c58 <HAL_GPIO_WritePin>
		while(1){}
 8001dea:	e7fe      	b.n	8001dea <main+0x8e>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(flag==0)
 8001dec:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <main+0x17c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <main+0x9e>
		{
			HCSR04_Read_1();
 8001df4:	f7ff ff44 	bl	8001c80 <HCSR04_Read_1>
 8001df8:	e00c      	b.n	8001e14 <main+0xb8>
		}
		else if (flag==1)
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <main+0x17c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <main+0xac>
		{
			HCSR04_Read_2();
 8001e02:	f7ff ff5b 	bl	8001cbc <HCSR04_Read_2>
 8001e06:	e005      	b.n	8001e14 <main+0xb8>
		}
		else if (flag==2)
 8001e08:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <main+0x17c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d101      	bne.n	8001e14 <main+0xb8>
		{
			HCSR04_Read_3();
 8001e10:	f7ff ff7c 	bl	8001d0c <HCSR04_Read_3>




	//	HAL_UART_Transmit(&huart6, UART_FLAgs, 5, 1000);
		txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <main+0x180>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
		txMessage.frame.id = 0x0B;
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <main+0x180>)
 8001e1c:	220b      	movs	r2, #11
 8001e1e:	605a      	str	r2, [r3, #4]
		txMessage.frame.dlc = 8;
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <main+0x180>)
 8001e22:	2208      	movs	r2, #8
 8001e24:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0 = toggle;
 8001e26:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <main+0x184>)
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <main+0x180>)
 8001e2c:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = flag_1;
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <main+0x188>)
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <main+0x180>)
 8001e34:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = flag_2;
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <main+0x18c>)
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <main+0x180>)
 8001e3c:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = flag_3;
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <main+0x190>)
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <main+0x180>)
 8001e44:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = flag_4;
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <main+0x194>)
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <main+0x180>)
 8001e4c:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = flag_5;
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <main+0x198>)
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <main+0x180>)
 8001e54:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = 0;
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <main+0x180>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = 0;
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <main+0x180>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(&txMessage);
 8001e62:	481e      	ldr	r0, [pc, #120]	; (8001edc <main+0x180>)
 8001e64:	f7ff f828 	bl	8000eb8 <CANSPI_Transmit>
		lcd16x2_clear();
 8001e68:	f7ff fc92 	bl	8001790 <lcd16x2_clear>
		lcd16x2_1stLine();
 8001e6c:	f7ff fc80 	bl	8001770 <lcd16x2_1stLine>
		lcd16x2_printf("%d/%d/%d/%d/%d",flag_1,flag_2,flag_3,flag_4,flag_5);
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <main+0x188>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <main+0x18c>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <main+0x190>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461c      	mov	r4, r3
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <main+0x194>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <main+0x198>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	9200      	str	r2, [sp, #0]
 8001e90:	4623      	mov	r3, r4
 8001e92:	4602      	mov	r2, r0
 8001e94:	4818      	ldr	r0, [pc, #96]	; (8001ef8 <main+0x19c>)
 8001e96:	f7ff fc85 	bl	80017a4 <lcd16x2_printf>
		//lcd16x2_printf("%d/%d/%d/%d/%d",UART_FLAgs[0],UART_FLAgs[1],UART_FLAgs[2],UART_FLAgs[3],UART_FLAgs[4]);
		lcd16x2_2ndLine();
 8001e9a:	f7ff fc71 	bl	8001780 <lcd16x2_2ndLine>
		lcd16x2_printf("%d/%d/%d",Distance_1,Distance_2,Distance_3);
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <main+0x1a0>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <main+0x1a4>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <main+0x1a8>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4816      	ldr	r0, [pc, #88]	; (8001f08 <main+0x1ac>)
 8001eb0:	f7ff fc78 	bl	80017a4 <lcd16x2_printf>


		toggle=!toggle;
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <main+0x184>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <main+0x184>)
 8001ec6:	701a      	strb	r2, [r3, #0]
		/*flag_1=0;
		flag_2=0;
		flag_3=0;
		flag_4=0;
		flag_5=0;*/
		HAL_Delay(100);
 8001ec8:	2064      	movs	r0, #100	; 0x64
 8001eca:	f000 fbf3 	bl	80026b4 <HAL_Delay>
		if(flag==0)
 8001ece:	e78d      	b.n	8001dec <main+0x90>
 8001ed0:	200000fc 	.word	0x200000fc
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	200001ca 	.word	0x200001ca
 8001edc:	20000188 	.word	0x20000188
 8001ee0:	200001cb 	.word	0x200001cb
 8001ee4:	200001cc 	.word	0x200001cc
 8001ee8:	200001cd 	.word	0x200001cd
 8001eec:	200001ce 	.word	0x200001ce
 8001ef0:	200001cf 	.word	0x200001cf
 8001ef4:	200001d0 	.word	0x200001d0
 8001ef8:	08005e80 	.word	0x08005e80
 8001efc:	200001a9 	.word	0x200001a9
 8001f00:	200001b9 	.word	0x200001b9
 8001f04:	200001c9 	.word	0x200001c9
 8001f08:	08005e90 	.word	0x08005e90

08001f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b094      	sub	sp, #80	; 0x50
 8001f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	2230      	movs	r2, #48	; 0x30
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fb20 	bl	8005560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <SystemClock_Config+0xcc>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <SystemClock_Config+0xcc>)
 8001f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <SystemClock_Config+0xcc>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <SystemClock_Config+0xd0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f58:	4a20      	ldr	r2, [pc, #128]	; (8001fdc <SystemClock_Config+0xd0>)
 8001f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <SystemClock_Config+0xd0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f70:	2301      	movs	r3, #1
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f74:	2310      	movs	r3, #16
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f80:	2308      	movs	r3, #8
 8001f82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001f84:	2348      	movs	r3, #72	; 0x48
 8001f86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f90:	f107 0320 	add.w	r3, r7, #32
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fe79 	bl	8002c8c <HAL_RCC_OscConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fa0:	f000 f962 	bl	8002268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 f8db 	bl	800317c <HAL_RCC_ClockConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001fcc:	f000 f94c 	bl	8002268 <Error_Handler>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3750      	adds	r7, #80	; 0x50
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40007000 	.word	0x40007000

08001fe0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <MX_SPI1_Init+0x64>)
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <MX_SPI1_Init+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_SPI1_Init+0x64>)
 8001fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_SPI1_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_SPI1_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_SPI1_Init+0x64>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_SPI1_Init+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_SPI1_Init+0x64>)
 800200c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002010:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_SPI1_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <MX_SPI1_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_SPI1_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <MX_SPI1_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_SPI1_Init+0x64>)
 800202c:	220a      	movs	r2, #10
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <MX_SPI1_Init+0x64>)
 8002032:	f001 fa83 	bl	800353c <HAL_SPI_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800203c:	f000 f914 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200000a4 	.word	0x200000a4
 8002048:	40013000 	.word	0x40013000

0800204c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0318 	add.w	r3, r7, #24
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800206a:	463b      	mov	r3, r7
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <MX_TIM1_Init+0x10c>)
 8002078:	4a38      	ldr	r2, [pc, #224]	; (800215c <MX_TIM1_Init+0x110>)
 800207a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <MX_TIM1_Init+0x10c>)
 800207e:	2247      	movs	r2, #71	; 0x47
 8002080:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b35      	ldr	r3, [pc, #212]	; (8002158 <MX_TIM1_Init+0x10c>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <MX_TIM1_Init+0x10c>)
 800208a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800208e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002090:	4b31      	ldr	r3, [pc, #196]	; (8002158 <MX_TIM1_Init+0x10c>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <MX_TIM1_Init+0x10c>)
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <MX_TIM1_Init+0x10c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020a2:	482d      	ldr	r0, [pc, #180]	; (8002158 <MX_TIM1_Init+0x10c>)
 80020a4:	f002 f800 	bl	80040a8 <HAL_TIM_Base_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80020ae:	f000 f8db 	bl	8002268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020b8:	f107 0318 	add.w	r3, r7, #24
 80020bc:	4619      	mov	r1, r3
 80020be:	4826      	ldr	r0, [pc, #152]	; (8002158 <MX_TIM1_Init+0x10c>)
 80020c0:	f002 fb58 	bl	8004774 <HAL_TIM_ConfigClockSource>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80020ca:	f000 f8cd 	bl	8002268 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80020ce:	4822      	ldr	r0, [pc, #136]	; (8002158 <MX_TIM1_Init+0x10c>)
 80020d0:	f002 f839 	bl	8004146 <HAL_TIM_IC_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80020da:	f000 f8c5 	bl	8002268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4619      	mov	r1, r3
 80020ec:	481a      	ldr	r0, [pc, #104]	; (8002158 <MX_TIM1_Init+0x10c>)
 80020ee:	f002 fed3 	bl	8004e98 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80020f8:	f000 f8b6 	bl	8002268 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020fc:	2300      	movs	r3, #0
 80020fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002100:	2301      	movs	r3, #1
 8002102:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800210c:	463b      	mov	r3, r7
 800210e:	2200      	movs	r2, #0
 8002110:	4619      	mov	r1, r3
 8002112:	4811      	ldr	r0, [pc, #68]	; (8002158 <MX_TIM1_Init+0x10c>)
 8002114:	f002 fa92 	bl	800463c <HAL_TIM_IC_ConfigChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800211e:	f000 f8a3 	bl	8002268 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002122:	463b      	mov	r3, r7
 8002124:	2204      	movs	r2, #4
 8002126:	4619      	mov	r1, r3
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <MX_TIM1_Init+0x10c>)
 800212a:	f002 fa87 	bl	800463c <HAL_TIM_IC_ConfigChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002134:	f000 f898 	bl	8002268 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002138:	463b      	mov	r3, r7
 800213a:	2208      	movs	r2, #8
 800213c:	4619      	mov	r1, r3
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <MX_TIM1_Init+0x10c>)
 8002140:	f002 fa7c 	bl	800463c <HAL_TIM_IC_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800214a:	f000 f88d 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200000fc 	.word	0x200000fc
 800215c:	40010000 	.word	0x40010000

08002160 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <MX_USART6_UART_Init+0x50>)
 8002168:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 800216c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002170:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_USART6_UART_Init+0x4c>)
 8002198:	f002 ff00 	bl	8004f9c <HAL_UART_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80021a2:	f000 f861 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000144 	.word	0x20000144
 80021b0:	40011400 	.word	0x40011400

080021b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <MX_GPIO_Init+0xa8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a22      	ldr	r2, [pc, #136]	; (800225c <MX_GPIO_Init+0xa8>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <MX_GPIO_Init+0xa8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b1c      	ldr	r3, [pc, #112]	; (800225c <MX_GPIO_Init+0xa8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a1b      	ldr	r2, [pc, #108]	; (800225c <MX_GPIO_Init+0xa8>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <MX_GPIO_Init+0xa8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CAN_CS_Pin, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	2117      	movs	r1, #23
 8002206:	4816      	ldr	r0, [pc, #88]	; (8002260 <MX_GPIO_Init+0xac>)
 8002208:	f000 fd26 	bl	8002c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800220c:	2200      	movs	r2, #0
 800220e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002212:	4814      	ldr	r0, [pc, #80]	; (8002264 <MX_GPIO_Init+0xb0>)
 8002214:	f000 fd20 	bl	8002c58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 CAN_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|CAN_CS_Pin;
 8002218:	2317      	movs	r3, #23
 800221a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4619      	mov	r1, r3
 800222e:	480c      	ldr	r0, [pc, #48]	; (8002260 <MX_GPIO_Init+0xac>)
 8002230:	f000 fb76 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin PB1 PB2 PB10
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002234:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002238:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_GPIO_Init+0xb0>)
 800224e:	f000 fb67 	bl	8002920 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002252:	bf00      	nop
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400

08002268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800226c:	b672      	cpsid	i
}
 800226e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002270:	e7fe      	b.n	8002270 <Error_Handler+0x8>
	...

08002274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_MspInit+0x4c>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <HAL_MspInit+0x4c>)
 8002284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_MspInit+0x4c>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_MspInit+0x4c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_MspInit+0x4c>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_MspInit+0x4c>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800

080022c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_SPI_MspInit+0x84>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d12b      	bne.n	800233e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_SPI_MspInit+0x88>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a17      	ldr	r2, [pc, #92]	; (800234c <HAL_SPI_MspInit+0x88>)
 80022f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_SPI_MspInit+0x88>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_SPI_MspInit+0x88>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_SPI_MspInit+0x88>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_SPI_MspInit+0x88>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800231e:	23e0      	movs	r3, #224	; 0xe0
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800232e:	2305      	movs	r3, #5
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	; (8002350 <HAL_SPI_MspInit+0x8c>)
 800233a:	f000 faf1 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40013000 	.word	0x40013000
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000

08002354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <HAL_TIM_Base_MspInit+0x94>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d134      	bne.n	80023e0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <HAL_TIM_Base_MspInit+0x98>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_TIM_Base_MspInit+0x98>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6453      	str	r3, [r2, #68]	; 0x44
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_TIM_Base_MspInit+0x98>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_TIM_Base_MspInit+0x98>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a14      	ldr	r2, [pc, #80]	; (80023ec <HAL_TIM_Base_MspInit+0x98>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_TIM_Base_MspInit+0x98>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80023ae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	4809      	ldr	r0, [pc, #36]	; (80023f0 <HAL_TIM_Base_MspInit+0x9c>)
 80023cc:	f000 faa8 	bl	8002920 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	201b      	movs	r0, #27
 80023d6:	f000 fa6c 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023da:	201b      	movs	r0, #27
 80023dc:	f000 fa85 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023e0:	bf00      	nop
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40010000 	.word	0x40010000
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020000 	.word	0x40020000

080023f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_UART_MspInit+0x84>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12c      	bne.n	8002470 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_UART_MspInit+0x88>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a17      	ldr	r2, [pc, #92]	; (800247c <HAL_UART_MspInit+0x88>)
 8002420:	f043 0320 	orr.w	r3, r3, #32
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <HAL_UART_MspInit+0x88>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_UART_MspInit+0x88>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <HAL_UART_MspInit+0x88>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <HAL_UART_MspInit+0x88>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800244e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002460:	2308      	movs	r3, #8
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <HAL_UART_MspInit+0x8c>)
 800246c:	f000 fa58 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40011400 	.word	0x40011400
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000

08002484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <NMI_Handler+0x4>

0800248a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <HardFault_Handler+0x4>

08002490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <MemManage_Handler+0x4>

08002496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <BusFault_Handler+0x4>

0800249c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <UsageFault_Handler+0x4>

080024a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d0:	f000 f8d0 	bl	8002674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <TIM1_CC_IRQHandler+0x10>)
 80024de:	f001 ffa5 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200000fc 	.word	0x200000fc

080024ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <_sbrk+0x5c>)
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <_sbrk+0x60>)
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <_sbrk+0x64>)
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <_sbrk+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	d207      	bcs.n	800252c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800251c:	f003 f828 	bl	8005570 <__errno>
 8002520:	4603      	mov	r3, r0
 8002522:	220c      	movs	r2, #12
 8002524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e009      	b.n	8002540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <_sbrk+0x64>)
 800253c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20010000 	.word	0x20010000
 800254c:	00000400 	.word	0x00000400
 8002550:	200001d4 	.word	0x200001d4
 8002554:	20000328 	.word	0x20000328

08002558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <SystemInit+0x20>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <SystemInit+0x20>)
 8002564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800257c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002580:	480d      	ldr	r0, [pc, #52]	; (80025b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002582:	490e      	ldr	r1, [pc, #56]	; (80025bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002584:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002588:	e002      	b.n	8002590 <LoopCopyDataInit>

0800258a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800258c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258e:	3304      	adds	r3, #4

08002590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002594:	d3f9      	bcc.n	800258a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002598:	4c0b      	ldr	r4, [pc, #44]	; (80025c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800259c:	e001      	b.n	80025a2 <LoopFillZerobss>

0800259e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a0:	3204      	adds	r2, #4

080025a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a4:	d3fb      	bcc.n	800259e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025a6:	f7ff ffd7 	bl	8002558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025aa:	f002 ffe7 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ae:	f7ff fbd5 	bl	8001d5c <main>
  bx  lr    
 80025b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80025c0:	08005ef8 	.word	0x08005ef8
  ldr r2, =_sbss
 80025c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80025c8:	20000324 	.word	0x20000324

080025cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025cc:	e7fe      	b.n	80025cc <ADC_IRQHandler>
	...

080025d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <HAL_Init+0x40>)
 80025da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_Init+0x40>)
 80025e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_Init+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_Init+0x40>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f8:	2003      	movs	r0, #3
 80025fa:	f000 f94f 	bl	800289c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fe:	200f      	movs	r0, #15
 8002600:	f000 f808 	bl	8002614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002604:	f7ff fe36 	bl	8002274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023c00 	.word	0x40023c00

08002614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_InitTick+0x54>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_InitTick+0x58>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262a:	fbb3 f3f1 	udiv	r3, r3, r1
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f967 	bl	8002906 <HAL_SYSTICK_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00e      	b.n	8002660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b0f      	cmp	r3, #15
 8002646:	d80a      	bhi.n	800265e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002648:	2200      	movs	r2, #0
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f000 f92f 	bl	80028b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002654:	4a06      	ldr	r2, [pc, #24]	; (8002670 <HAL_InitTick+0x5c>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000004 	.word	0x20000004
 800266c:	2000000c 	.word	0x2000000c
 8002670:	20000008 	.word	0x20000008

08002674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x20>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_IncTick+0x24>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4413      	add	r3, r2
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_IncTick+0x24>)
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	2000000c 	.word	0x2000000c
 8002698:	200001d8 	.word	0x200001d8

0800269c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return uwTick;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_GetTick+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200001d8 	.word	0x200001d8

080026b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff ffee 	bl	800269c <HAL_GetTick>
 80026c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d005      	beq.n	80026da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_Delay+0x44>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026da:	bf00      	nop
 80026dc:	f7ff ffde 	bl	800269c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d8f7      	bhi.n	80026dc <HAL_Delay+0x28>
  {
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000000c 	.word	0x2000000c

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002868:	d301      	bcc.n	800286e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286a:	2301      	movs	r3, #1
 800286c:	e00f      	b.n	800288e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <SysTick_Config+0x40>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002876:	210f      	movs	r1, #15
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f7ff ff8e 	bl	800279c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SysTick_Config+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <SysTick_Config+0x40>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff29 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff3e 	bl	8002744 <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff8e 	bl	80027f0 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5d 	bl	800279c <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff31 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffa2 	bl	8002858 <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	e159      	b.n	8002bf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	429a      	cmp	r2, r3
 8002956:	f040 8148 	bne.w	8002bea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d005      	beq.n	8002972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	2b02      	cmp	r3, #2
 8002970:	d130      	bne.n	80029d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a8:	2201      	movs	r2, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 0201 	and.w	r2, r3, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d017      	beq.n	8002a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d123      	bne.n	8002a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	08da      	lsrs	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3208      	adds	r2, #8
 8002a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0203 	and.w	r2, r3, #3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a2 	beq.w	8002bea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <HAL_GPIO_Init+0x2e8>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a56      	ldr	r2, [pc, #344]	; (8002c08 <HAL_GPIO_Init+0x2e8>)
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <HAL_GPIO_Init+0x2e8>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac2:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_GPIO_Init+0x2ec>)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <HAL_GPIO_Init+0x2f0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x202>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_GPIO_Init+0x2f4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x1fe>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a47      	ldr	r2, [pc, #284]	; (8002c18 <HAL_GPIO_Init+0x2f8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x1fa>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a46      	ldr	r2, [pc, #280]	; (8002c1c <HAL_GPIO_Init+0x2fc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x1f6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a45      	ldr	r2, [pc, #276]	; (8002c20 <HAL_GPIO_Init+0x300>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x1f2>
 8002b0e:	2304      	movs	r3, #4
 8002b10:	e008      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x204>
 8002b22:	2300      	movs	r3, #0
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f002 0203 	and.w	r2, r2, #3
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4093      	lsls	r3, r2
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b34:	4935      	ldr	r1, [pc, #212]	; (8002c0c <HAL_GPIO_Init+0x2ec>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b42:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b66:	4a2f      	ldr	r2, [pc, #188]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b6c:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b90:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bba:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	f67f aea2 	bls.w	800293c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40020800 	.word	0x40020800
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40013c00 	.word	0x40013c00

08002c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	887b      	ldrh	r3, [r7, #2]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e001      	b.n	8002c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
 8002c64:	4613      	mov	r3, r2
 8002c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c68:	787b      	ldrb	r3, [r7, #1]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c74:	e003      	b.n	8002c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c76:	887b      	ldrh	r3, [r7, #2]
 8002c78:	041a      	lsls	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	619a      	str	r2, [r3, #24]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e267      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002caa:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b82      	ldr	r3, [pc, #520]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e242      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6f      	ldr	r2, [pc, #444]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6c      	ldr	r2, [pc, #432]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b69      	ldr	r3, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a68      	ldr	r2, [pc, #416]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7ff fcaa 	bl	800269c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7ff fca6 	bl	800269c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e207      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fc96 	bl	800269c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7ff fc92 	bl	800269c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1f3      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b51      	ldr	r3, [pc, #324]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da2:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b44      	ldr	r3, [pc, #272]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1c7      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4937      	ldr	r1, [pc, #220]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7ff fc4b 	bl	800269c <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7ff fc47 	bl	800269c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1a8      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4925      	ldr	r1, [pc, #148]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7ff fc2a 	bl	800269c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7ff fc26 	bl	800269c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e187      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d036      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7ff fc0a 	bl	800269c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7ff fc06 	bl	800269c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e167      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
 8002eaa:	e01b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7ff fbf3 	bl	800269c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e00e      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7ff fbef 	bl	800269c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d907      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e150      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	42470000 	.word	0x42470000
 8002ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ea      	bne.n	8002eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8097 	beq.w	8003020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b81      	ldr	r3, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	4b7d      	ldr	r3, [pc, #500]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	4a7c      	ldr	r2, [pc, #496]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	; 0x40
 8002f12:	4b7a      	ldr	r3, [pc, #488]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b77      	ldr	r3, [pc, #476]	; (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2e:	4b74      	ldr	r3, [pc, #464]	; (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a73      	ldr	r2, [pc, #460]	; (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7ff fbaf 	bl	800269c <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7ff fbab 	bl	800269c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e10c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
 8002f68:	4b64      	ldr	r3, [pc, #400]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a63      	ldr	r2, [pc, #396]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	e01c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x30c>
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a5b      	ldr	r2, [pc, #364]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f98:	4b58      	ldr	r3, [pc, #352]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a57      	ldr	r2, [pc, #348]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa4:	4b55      	ldr	r3, [pc, #340]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	4a54      	ldr	r2, [pc, #336]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 0304 	bic.w	r3, r3, #4
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7ff fb70 	bl	800269c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7ff fb6c 	bl	800269c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0cb      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	4b49      	ldr	r3, [pc, #292]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ee      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x334>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7ff fb5a 	bl	800269c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7ff fb56 	bl	800269c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0b5      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	4b3e      	ldr	r3, [pc, #248]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ee      	bne.n	8002fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003014:	4b39      	ldr	r3, [pc, #228]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	4a38      	ldr	r2, [pc, #224]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a1 	beq.w	800316c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800302a:	4b34      	ldr	r3, [pc, #208]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	d05c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d141      	bne.n	80030c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_RCC_OscConfig+0x478>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7ff fb2a 	bl	800269c <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7ff fb26 	bl	800269c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e087      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	3b01      	subs	r3, #1
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	491b      	ldr	r1, [pc, #108]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCC_OscConfig+0x478>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7ff faff 	bl	800269c <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a2:	f7ff fafb 	bl	800269c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e05c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x416>
 80030c0:	e054      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_RCC_OscConfig+0x478>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7ff fae8 	bl	800269c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7ff fae4 	bl	800269c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e045      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCC_OscConfig+0x470>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x444>
 80030ee:	e03d      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e038      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000
 8003104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d028      	beq.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d121      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d11a      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800313e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	3b01      	subs	r3, #1
 8003152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cc      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d90c      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e067      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4934      	ldr	r1, [pc, #208]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7ff fa16 	bl	800269c <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7ff fa12 	bl	800269c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d20c      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff f976 	bl	8002614 <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	08005e9c 	.word	0x08005e9c
 8003340:	20000004 	.word	0x20000004
 8003344:	20000008 	.word	0x20000008

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b090      	sub	sp, #64	; 0x40
 800334e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
 8003354:	2300      	movs	r3, #0
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003358:	2300      	movs	r3, #0
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003360:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d00d      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x40>
 800336c:	2b08      	cmp	r3, #8
 800336e:	f200 80a1 	bhi.w	80034b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x34>
 8003376:	2b04      	cmp	r3, #4
 8003378:	d003      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x3a>
 800337a:	e09b      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCC_GetSysClockFreq+0x184>)
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003380:	e09b      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003382:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003386:	e098      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003388:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003390:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003392:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d028      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339e:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	2200      	movs	r2, #0
 80033a6:	623b      	str	r3, [r7, #32]
 80033a8:	627a      	str	r2, [r7, #36]	; 0x24
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033b0:	2100      	movs	r1, #0
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033b4:	fb03 f201 	mul.w	r2, r3, r1
 80033b8:	2300      	movs	r3, #0
 80033ba:	fb00 f303 	mul.w	r3, r0, r3
 80033be:	4413      	add	r3, r2
 80033c0:	4a43      	ldr	r2, [pc, #268]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c2:	fba0 1202 	umull	r1, r2, r0, r2
 80033c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c8:	460a      	mov	r2, r1
 80033ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80033cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ce:	4413      	add	r3, r2
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d4:	2200      	movs	r2, #0
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	61fa      	str	r2, [r7, #28]
 80033da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033e2:	f7fd fb43 	bl	8000a6c <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4613      	mov	r3, r2
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ee:	e053      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f0:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	2200      	movs	r2, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	617a      	str	r2, [r7, #20]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003402:	f04f 0b00 	mov.w	fp, #0
 8003406:	4652      	mov	r2, sl
 8003408:	465b      	mov	r3, fp
 800340a:	f04f 0000 	mov.w	r0, #0
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	0159      	lsls	r1, r3, #5
 8003414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003418:	0150      	lsls	r0, r2, #5
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	ebb2 080a 	subs.w	r8, r2, sl
 8003422:	eb63 090b 	sbc.w	r9, r3, fp
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003432:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003436:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800343a:	ebb2 0408 	subs.w	r4, r2, r8
 800343e:	eb63 0509 	sbc.w	r5, r3, r9
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	00eb      	lsls	r3, r5, #3
 800344c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003450:	00e2      	lsls	r2, r4, #3
 8003452:	4614      	mov	r4, r2
 8003454:	461d      	mov	r5, r3
 8003456:	eb14 030a 	adds.w	r3, r4, sl
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	eb45 030b 	adc.w	r3, r5, fp
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800346e:	4629      	mov	r1, r5
 8003470:	028b      	lsls	r3, r1, #10
 8003472:	4621      	mov	r1, r4
 8003474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003478:	4621      	mov	r1, r4
 800347a:	028a      	lsls	r2, r1, #10
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	2200      	movs	r2, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	60fa      	str	r2, [r7, #12]
 8003488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800348c:	f7fd faee 	bl	8000a6c <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4613      	mov	r3, r2
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	3301      	adds	r3, #1
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034b2:	e002      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetSysClockFreq+0x184>)
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3740      	adds	r7, #64	; 0x40
 80034c0:	46bd      	mov	sp, r7
 80034c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	00f42400 	.word	0x00f42400
 80034d0:	017d7840 	.word	0x017d7840

080034d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000004 	.word	0x20000004

080034ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034f0:	f7ff fff0 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0a9b      	lsrs	r3, r3, #10
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4903      	ldr	r1, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	08005eac 	.word	0x08005eac

08003514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003518:	f7ff ffdc 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0b5b      	lsrs	r3, r3, #13
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4903      	ldr	r1, [pc, #12]	; (8003538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40023800 	.word	0x40023800
 8003538:	08005eac 	.word	0x08005eac

0800353c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e07b      	b.n	8003646 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355e:	d009      	beq.n	8003574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
 8003566:	e005      	b.n	8003574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe fe98 	bl	80022c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	ea42 0103 	orr.w	r1, r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	f003 0104 	and.w	r1, r3, #4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f003 0210 	and.w	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003634:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b088      	sub	sp, #32
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_SPI_Transmit+0x22>
 800366c:	2302      	movs	r3, #2
 800366e:	e126      	b.n	80038be <HAL_SPI_Transmit+0x270>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003678:	f7ff f810 	bl	800269c <HAL_GetTick>
 800367c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d002      	beq.n	8003694 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800368e:	2302      	movs	r3, #2
 8003690:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003692:	e10b      	b.n	80038ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_Transmit+0x52>
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036a4:	e102      	b.n	80038ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2203      	movs	r2, #3
 80036aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	88fa      	ldrh	r2, [r7, #6]
 80036be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ec:	d10f      	bne.n	800370e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800370c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d007      	beq.n	800372c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003734:	d14b      	bne.n	80037ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_SPI_Transmit+0xf6>
 800373e:	8afb      	ldrh	r3, [r7, #22]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d13e      	bne.n	80037c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	1c9a      	adds	r2, r3, #2
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003768:	e02b      	b.n	80037c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b02      	cmp	r3, #2
 8003776:	d112      	bne.n	800379e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	881a      	ldrh	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	86da      	strh	r2, [r3, #54]	; 0x36
 800379c:	e011      	b.n	80037c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800379e:	f7fe ff7d 	bl	800269c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d803      	bhi.n	80037b6 <HAL_SPI_Transmit+0x168>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d102      	bne.n	80037bc <HAL_SPI_Transmit+0x16e>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037c0:	e074      	b.n	80038ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ce      	bne.n	800376a <HAL_SPI_Transmit+0x11c>
 80037cc:	e04c      	b.n	8003868 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_Transmit+0x18e>
 80037d6:	8afb      	ldrh	r3, [r7, #22]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d140      	bne.n	800385e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	7812      	ldrb	r2, [r2, #0]
 80037e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003802:	e02c      	b.n	800385e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d113      	bne.n	800383a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	7812      	ldrb	r2, [r2, #0]
 800381e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	86da      	strh	r2, [r3, #54]	; 0x36
 8003838:	e011      	b.n	800385e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800383a:	f7fe ff2f 	bl	800269c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d803      	bhi.n	8003852 <HAL_SPI_Transmit+0x204>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d102      	bne.n	8003858 <HAL_SPI_Transmit+0x20a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800385c:	e026      	b.n	80038ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1cd      	bne.n	8003804 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	6839      	ldr	r1, [r7, #0]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fbd9 	bl	8004024 <SPI_EndRxTxTransaction>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e000      	b.n	80038ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80038aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b088      	sub	sp, #32
 80038ca:	af02      	add	r7, sp, #8
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e2:	d112      	bne.n	800390a <HAL_SPI_Receive+0x44>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10e      	bne.n	800390a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2204      	movs	r2, #4
 80038f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f8f1 	bl	8003ae8 <HAL_SPI_TransmitReceive>
 8003906:	4603      	mov	r3, r0
 8003908:	e0ea      	b.n	8003ae0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_SPI_Receive+0x52>
 8003914:	2302      	movs	r3, #2
 8003916:	e0e3      	b.n	8003ae0 <HAL_SPI_Receive+0x21a>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003920:	f7fe febc 	bl	800269c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d002      	beq.n	8003938 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003932:	2302      	movs	r3, #2
 8003934:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003936:	e0ca      	b.n	8003ace <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_SPI_Receive+0x7e>
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003948:	e0c1      	b.n	8003ace <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2204      	movs	r2, #4
 800394e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003990:	d10f      	bne.n	80039b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d007      	beq.n	80039d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d162      	bne.n	8003a9e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039d8:	e02e      	b.n	8003a38 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d115      	bne.n	8003a14 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f103 020c 	add.w	r2, r3, #12
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a12:	e011      	b.n	8003a38 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a14:	f7fe fe42 	bl	800269c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d803      	bhi.n	8003a2c <HAL_SPI_Receive+0x166>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d102      	bne.n	8003a32 <HAL_SPI_Receive+0x16c>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a36:	e04a      	b.n	8003ace <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1cb      	bne.n	80039da <HAL_SPI_Receive+0x114>
 8003a42:	e031      	b.n	8003aa8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d113      	bne.n	8003a7a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	1c9a      	adds	r2, r3, #2
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a78:	e011      	b.n	8003a9e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a7a:	f7fe fe0f 	bl	800269c <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d803      	bhi.n	8003a92 <HAL_SPI_Receive+0x1cc>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d102      	bne.n	8003a98 <HAL_SPI_Receive+0x1d2>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a9c:	e017      	b.n	8003ace <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1cd      	bne.n	8003a44 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	6839      	ldr	r1, [r7, #0]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fa53 	bl	8003f58 <SPI_EndRxTransaction>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
 8003aca:	e000      	b.n	8003ace <HAL_SPI_Receive+0x208>
  }

error :
 8003acc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003af6:	2301      	movs	r3, #1
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x26>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e18a      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x33c>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b16:	f7fe fdc1 	bl	800269c <HAL_GetTick>
 8003b1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b2c:	887b      	ldrh	r3, [r7, #2]
 8003b2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d00f      	beq.n	8003b58 <HAL_SPI_TransmitReceive+0x70>
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3e:	d107      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x68>
 8003b48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d003      	beq.n	8003b58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
 8003b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b56:	e15b      	b.n	8003e10 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x82>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x82>
 8003b64:	887b      	ldrh	r3, [r7, #2]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b70:	e14e      	b.n	8003e10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d003      	beq.n	8003b86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2205      	movs	r2, #5
 8003b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	887a      	ldrh	r2, [r7, #2]
 8003b96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	887a      	ldrh	r2, [r7, #2]
 8003bae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b40      	cmp	r3, #64	; 0x40
 8003bc8:	d007      	beq.n	8003bda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be2:	d178      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_TransmitReceive+0x10a>
 8003bec:	8b7b      	ldrh	r3, [r7, #26]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d166      	bne.n	8003cc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	881a      	ldrh	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	1c9a      	adds	r2, r3, #2
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c16:	e053      	b.n	8003cc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d11b      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x176>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d016      	beq.n	8003c5e <HAL_SPI_TransmitReceive+0x176>
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d113      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	881a      	ldrh	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d119      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x1b8>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d014      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	b292      	uxth	r2, r2
 8003c82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	1c9a      	adds	r2, r3, #2
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ca0:	f7fe fcfc 	bl	800269c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d807      	bhi.n	8003cc0 <HAL_SPI_TransmitReceive+0x1d8>
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb6:	d003      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cbe:	e0a7      	b.n	8003e10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1a6      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x130>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1a1      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x130>
 8003cd4:	e07c      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SPI_TransmitReceive+0x1fc>
 8003cde:	8b7b      	ldrh	r3, [r7, #26]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d16b      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d0a:	e057      	b.n	8003dbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d11c      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x26c>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d017      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x26c>
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d114      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d119      	bne.n	8003d96 <HAL_SPI_TransmitReceive+0x2ae>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d014      	beq.n	8003d96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d92:	2301      	movs	r3, #1
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d96:	f7fe fc81 	bl	800269c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d803      	bhi.n	8003dae <HAL_SPI_TransmitReceive+0x2c6>
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d102      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x2cc>
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dba:	e029      	b.n	8003e10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1a2      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x224>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d19d      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f925 	bl	8004024 <SPI_EndRxTxTransaction>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d006      	beq.n	8003dee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003dec:	e010      	b.n	8003e10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	e000      	b.n	8003e10 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3730      	adds	r7, #48	; 0x30
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3a:	b2db      	uxtb	r3, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e58:	f7fe fc20 	bl	800269c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e68:	f7fe fc18 	bl	800269c <HAL_GetTick>
 8003e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e6e:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	015b      	lsls	r3, r3, #5
 8003e74:	0d1b      	lsrs	r3, r3, #20
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e7e:	e054      	b.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d050      	beq.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e88:	f7fe fc08 	bl	800269c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d902      	bls.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d13d      	bne.n	8003f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb6:	d111      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec0:	d004      	beq.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d107      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee4:	d10f      	bne.n	8003f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e017      	b.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d19b      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000004 	.word	0x20000004

08003f58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6c:	d111      	bne.n	8003f92 <SPI_EndRxTransaction+0x3a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f76:	d004      	beq.n	8003f82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f80:	d107      	bne.n	8003f92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f90:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9a:	d12a      	bne.n	8003ff2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa4:	d012      	beq.n	8003fcc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2180      	movs	r1, #128	; 0x80
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff ff49 	bl	8003e48 <SPI_WaitFlagStateUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02d      	beq.n	8004018 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	f043 0220 	orr.w	r2, r3, #32
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e026      	b.n	800401a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff ff36 	bl	8003e48 <SPI_WaitFlagStateUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01a      	beq.n	8004018 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e013      	b.n	800401a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f7ff ff23 	bl	8003e48 <SPI_WaitFlagStateUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e000      	b.n	800401a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <SPI_EndRxTxTransaction+0x7c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <SPI_EndRxTxTransaction+0x80>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0d5b      	lsrs	r3, r3, #21
 800403c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404e:	d112      	bne.n	8004076 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2200      	movs	r2, #0
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff fef4 	bl	8003e48 <SPI_WaitFlagStateUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00f      	b.n	8004096 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3b01      	subs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d0f2      	beq.n	8004076 <SPI_EndRxTxTransaction+0x52>
 8004090:	e000      	b.n	8004094 <SPI_EndRxTxTransaction+0x70>
        break;
 8004092:	bf00      	nop
  }

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000004 	.word	0x20000004
 80040a4:	165e9f81 	.word	0x165e9f81

080040a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e041      	b.n	800413e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fe f940 	bl	8002354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 fc78 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e041      	b.n	80041dc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f839 	bl	80041e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f000 fc29 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <HAL_TIM_IC_Start_IT+0x1e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e013      	b.n	800423e <HAL_TIM_IC_Start_IT+0x46>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d104      	bne.n	8004226 <HAL_TIM_IC_Start_IT+0x2e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004222:	b2db      	uxtb	r3, r3
 8004224:	e00b      	b.n	800423e <HAL_TIM_IC_Start_IT+0x46>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d104      	bne.n	8004236 <HAL_TIM_IC_Start_IT+0x3e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004232:	b2db      	uxtb	r3, r3
 8004234:	e003      	b.n	800423e <HAL_TIM_IC_Start_IT+0x46>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <HAL_TIM_IC_Start_IT+0x58>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e013      	b.n	8004278 <HAL_TIM_IC_Start_IT+0x80>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d104      	bne.n	8004260 <HAL_TIM_IC_Start_IT+0x68>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e00b      	b.n	8004278 <HAL_TIM_IC_Start_IT+0x80>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b08      	cmp	r3, #8
 8004264:	d104      	bne.n	8004270 <HAL_TIM_IC_Start_IT+0x78>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e003      	b.n	8004278 <HAL_TIM_IC_Start_IT+0x80>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004276:	b2db      	uxtb	r3, r3
 8004278:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800427a:	7bbb      	ldrb	r3, [r7, #14]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d102      	bne.n	8004286 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004280:	7b7b      	ldrb	r3, [r7, #13]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d001      	beq.n	800428a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0c2      	b.n	8004410 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d104      	bne.n	800429a <HAL_TIM_IC_Start_IT+0xa2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004298:	e013      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0xca>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b04      	cmp	r3, #4
 800429e:	d104      	bne.n	80042aa <HAL_TIM_IC_Start_IT+0xb2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a8:	e00b      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0xca>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_IC_Start_IT+0xc2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b8:	e003      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0xca>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_IC_Start_IT+0xda>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d0:	e013      	b.n	80042fa <HAL_TIM_IC_Start_IT+0x102>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_IC_Start_IT+0xea>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042e0:	e00b      	b.n	80042fa <HAL_TIM_IC_Start_IT+0x102>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_IC_Start_IT+0xfa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f0:	e003      	b.n	80042fa <HAL_TIM_IC_Start_IT+0x102>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b0c      	cmp	r3, #12
 80042fe:	d841      	bhi.n	8004384 <HAL_TIM_IC_Start_IT+0x18c>
 8004300:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <HAL_TIM_IC_Start_IT+0x110>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	0800433d 	.word	0x0800433d
 800430c:	08004385 	.word	0x08004385
 8004310:	08004385 	.word	0x08004385
 8004314:	08004385 	.word	0x08004385
 8004318:	0800434f 	.word	0x0800434f
 800431c:	08004385 	.word	0x08004385
 8004320:	08004385 	.word	0x08004385
 8004324:	08004385 	.word	0x08004385
 8004328:	08004361 	.word	0x08004361
 800432c:	08004385 	.word	0x08004385
 8004330:	08004385 	.word	0x08004385
 8004334:	08004385 	.word	0x08004385
 8004338:	08004373 	.word	0x08004373
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0202 	orr.w	r2, r2, #2
 800434a:	60da      	str	r2, [r3, #12]
      break;
 800434c:	e01d      	b.n	800438a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0204 	orr.w	r2, r2, #4
 800435c:	60da      	str	r2, [r3, #12]
      break;
 800435e:	e014      	b.n	800438a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0208 	orr.w	r2, r2, #8
 800436e:	60da      	str	r2, [r3, #12]
      break;
 8004370:	e00b      	b.n	800438a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0210 	orr.w	r2, r2, #16
 8004380:	60da      	str	r2, [r3, #12]
      break;
 8004382:	e002      	b.n	800438a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      break;
 8004388:	bf00      	nop
  }

  if (status == HAL_OK)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d13e      	bne.n	800440e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fd57 	bl	8004e4c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <HAL_TIM_IC_Start_IT+0x220>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d018      	beq.n	80043da <HAL_TIM_IC_Start_IT+0x1e2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b0:	d013      	beq.n	80043da <HAL_TIM_IC_Start_IT+0x1e2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a19      	ldr	r2, [pc, #100]	; (800441c <HAL_TIM_IC_Start_IT+0x224>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_TIM_IC_Start_IT+0x1e2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a17      	ldr	r2, [pc, #92]	; (8004420 <HAL_TIM_IC_Start_IT+0x228>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_TIM_IC_Start_IT+0x1e2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_TIM_IC_Start_IT+0x22c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_TIM_IC_Start_IT+0x1e2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a14      	ldr	r2, [pc, #80]	; (8004428 <HAL_TIM_IC_Start_IT+0x230>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d111      	bne.n	80043fe <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d010      	beq.n	800440e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fc:	e007      	b.n	800440e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40014000 	.word	0x40014000

0800442c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d122      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d11b      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0202 	mvn.w	r2, #2
 8004458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fd f9ca 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa92 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fa99 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d122      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d11b      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0204 	mvn.w	r2, #4
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd f9a0 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fa68 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fa6f 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d122      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d11b      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0208 	mvn.w	r2, #8
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fd f976 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa3e 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fa45 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b10      	cmp	r3, #16
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd f94c 	bl	8001808 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa14 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fa1b 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0201 	mvn.w	r2, #1
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9ee 	bl	800498c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fcd6 	bl	8004f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9e0 	bl	80049c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0220 	mvn.w	r2, #32
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fca0 	bl	8004f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004656:	2302      	movs	r3, #2
 8004658:	e088      	b.n	800476c <HAL_TIM_IC_ConfigChannel+0x130>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11b      	bne.n	80046a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f000 fa30 	bl	8004adc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 020c 	bic.w	r2, r2, #12
 800468a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6999      	ldr	r1, [r3, #24]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	619a      	str	r2, [r3, #24]
 800469e:	e060      	b.n	8004762 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d11c      	bne.n	80046e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f000 faa8 	bl	8004c0a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6999      	ldr	r1, [r3, #24]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	021a      	lsls	r2, r3, #8
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	619a      	str	r2, [r3, #24]
 80046de:	e040      	b.n	8004762 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d11b      	bne.n	800471e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f000 faf5 	bl	8004ce4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 020c 	bic.w	r2, r2, #12
 8004708:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69d9      	ldr	r1, [r3, #28]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	61da      	str	r2, [r3, #28]
 800471c:	e021      	b.n	8004762 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b0c      	cmp	r3, #12
 8004722:	d11c      	bne.n	800475e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6819      	ldr	r1, [r3, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f000 fb12 	bl	8004d5c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004746:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69d9      	ldr	r1, [r3, #28]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	61da      	str	r2, [r3, #28]
 800475c:	e001      	b.n	8004762 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_TIM_ConfigClockSource+0x1c>
 800478c:	2302      	movs	r3, #2
 800478e:	e0b4      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x186>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c8:	d03e      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0xd4>
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	f200 8087 	bhi.w	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d6:	f000 8086 	beq.w	80048e6 <HAL_TIM_ConfigClockSource+0x172>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d87f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b70      	cmp	r3, #112	; 0x70
 80047e2:	d01a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0xa6>
 80047e4:	2b70      	cmp	r3, #112	; 0x70
 80047e6:	d87b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d050      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x11a>
 80047ec:	2b60      	cmp	r3, #96	; 0x60
 80047ee:	d877      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b50      	cmp	r3, #80	; 0x50
 80047f2:	d03c      	beq.n	800486e <HAL_TIM_ConfigClockSource+0xfa>
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d873      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d058      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0x13a>
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d86f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d064      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d86b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d060      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d867      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d05c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004814:	2b10      	cmp	r3, #16
 8004816:	d05a      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	e062      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6899      	ldr	r1, [r3, #8]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f000 faef 	bl	8004e0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800483c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	609a      	str	r2, [r3, #8]
      break;
 8004846:	e04f      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f000 fad8 	bl	8004e0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486a:	609a      	str	r2, [r3, #8]
      break;
 800486c:	e03c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	461a      	mov	r2, r3
 800487c:	f000 f996 	bl	8004bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2150      	movs	r1, #80	; 0x50
 8004886:	4618      	mov	r0, r3
 8004888:	f000 faa5 	bl	8004dd6 <TIM_ITRx_SetConfig>
      break;
 800488c:	e02c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	461a      	mov	r2, r3
 800489c:	f000 f9f2 	bl	8004c84 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2160      	movs	r1, #96	; 0x60
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fa95 	bl	8004dd6 <TIM_ITRx_SetConfig>
      break;
 80048ac:	e01c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 f976 	bl	8004bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fa85 	bl	8004dd6 <TIM_ITRx_SetConfig>
      break;
 80048cc:	e00c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f000 fa7c 	bl	8004dd6 <TIM_ITRx_SetConfig>
      break;
 80048de:	e003      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      break;
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d831      	bhi.n	800497c <HAL_TIM_ReadCapturedValue+0x78>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <HAL_TIM_ReadCapturedValue+0x1c>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004955 	.word	0x08004955
 8004924:	0800497d 	.word	0x0800497d
 8004928:	0800497d 	.word	0x0800497d
 800492c:	0800497d 	.word	0x0800497d
 8004930:	0800495f 	.word	0x0800495f
 8004934:	0800497d 	.word	0x0800497d
 8004938:	0800497d 	.word	0x0800497d
 800493c:	0800497d 	.word	0x0800497d
 8004940:	08004969 	.word	0x08004969
 8004944:	0800497d 	.word	0x0800497d
 8004948:	0800497d 	.word	0x0800497d
 800494c:	0800497d 	.word	0x0800497d
 8004950:	08004973 	.word	0x08004973
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495a:	60fb      	str	r3, [r7, #12]

      break;
 800495c:	e00f      	b.n	800497e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	60fb      	str	r3, [r7, #12]

      break;
 8004966:	e00a      	b.n	800497e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	60fb      	str	r3, [r7, #12]

      break;
 8004970:	e005      	b.n	800497e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	60fb      	str	r3, [r7, #12]

      break;
 800497a:	e000      	b.n	800497e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800497c:	bf00      	nop
  }

  return tmpreg;
 800497e:	68fb      	ldr	r3, [r7, #12]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a34      	ldr	r2, [pc, #208]	; (8004ac0 <TIM_Base_SetConfig+0xe4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00f      	beq.n	8004a14 <TIM_Base_SetConfig+0x38>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fa:	d00b      	beq.n	8004a14 <TIM_Base_SetConfig+0x38>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a31      	ldr	r2, [pc, #196]	; (8004ac4 <TIM_Base_SetConfig+0xe8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d007      	beq.n	8004a14 <TIM_Base_SetConfig+0x38>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a30      	ldr	r2, [pc, #192]	; (8004ac8 <TIM_Base_SetConfig+0xec>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_Base_SetConfig+0x38>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a2f      	ldr	r2, [pc, #188]	; (8004acc <TIM_Base_SetConfig+0xf0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d108      	bne.n	8004a26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a25      	ldr	r2, [pc, #148]	; (8004ac0 <TIM_Base_SetConfig+0xe4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01b      	beq.n	8004a66 <TIM_Base_SetConfig+0x8a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a34:	d017      	beq.n	8004a66 <TIM_Base_SetConfig+0x8a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a22      	ldr	r2, [pc, #136]	; (8004ac4 <TIM_Base_SetConfig+0xe8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <TIM_Base_SetConfig+0x8a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a21      	ldr	r2, [pc, #132]	; (8004ac8 <TIM_Base_SetConfig+0xec>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00f      	beq.n	8004a66 <TIM_Base_SetConfig+0x8a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <TIM_Base_SetConfig+0xf0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00b      	beq.n	8004a66 <TIM_Base_SetConfig+0x8a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <TIM_Base_SetConfig+0xf4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d007      	beq.n	8004a66 <TIM_Base_SetConfig+0x8a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <TIM_Base_SetConfig+0xf8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_Base_SetConfig+0x8a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <TIM_Base_SetConfig+0xfc>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d108      	bne.n	8004a78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a08      	ldr	r2, [pc, #32]	; (8004ac0 <TIM_Base_SetConfig+0xe4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d103      	bne.n	8004aac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	615a      	str	r2, [r3, #20]
}
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800
 8004acc:	40000c00 	.word	0x40000c00
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40014800 	.word	0x40014800

08004adc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a24      	ldr	r2, [pc, #144]	; (8004b98 <TIM_TI1_SetConfig+0xbc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <TIM_TI1_SetConfig+0x56>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d00f      	beq.n	8004b32 <TIM_TI1_SetConfig+0x56>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <TIM_TI1_SetConfig+0xc0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00b      	beq.n	8004b32 <TIM_TI1_SetConfig+0x56>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <TIM_TI1_SetConfig+0xc4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d007      	beq.n	8004b32 <TIM_TI1_SetConfig+0x56>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4a1f      	ldr	r2, [pc, #124]	; (8004ba4 <TIM_TI1_SetConfig+0xc8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d003      	beq.n	8004b32 <TIM_TI1_SetConfig+0x56>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ba8 <TIM_TI1_SetConfig+0xcc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d101      	bne.n	8004b36 <TIM_TI1_SetConfig+0x5a>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <TIM_TI1_SetConfig+0x5c>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e003      	b.n	8004b56 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f023 030a 	bic.w	r3, r3, #10
 8004b70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f003 030a 	and.w	r3, r3, #10
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40014000 	.word	0x40014000

08004bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 030a 	bic.w	r3, r3, #10
 8004be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b087      	sub	sp, #28
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f023 0210 	bic.w	r2, r3, #16
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	031b      	lsls	r3, r3, #12
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	621a      	str	r2, [r3, #32]
}
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f023 0210 	bic.w	r2, r3, #16
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	031b      	lsls	r3, r3, #12
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f023 0303 	bic.w	r3, r3, #3
 8004d10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004d34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	621a      	str	r2, [r3, #32]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	031b      	lsls	r3, r3, #12
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004dae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	031b      	lsls	r3, r3, #12
 8004db4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f043 0307 	orr.w	r3, r3, #7
 8004df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	609a      	str	r2, [r3, #8]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	021a      	lsls	r2, r3, #8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 031f 	and.w	r3, r3, #31
 8004e5e:	2201      	movs	r2, #1
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1a      	ldr	r2, [r3, #32]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	401a      	ands	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	fa01 f303 	lsl.w	r3, r1, r3
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e050      	b.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d018      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efc:	d013      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00e      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d009      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a13      	ldr	r2, [pc, #76]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10c      	bne.n	8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40010000 	.word	0x40010000
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800
 8004f6c:	40000c00 	.word	0x40000c00
 8004f70:	40014000 	.word	0x40014000

08004f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e03f      	b.n	800502e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fd fa16 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	; 0x24
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f829 	bl	8005038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695a      	ldr	r2, [r3, #20]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800503c:	b0c0      	sub	sp, #256	; 0x100
 800503e:	af00      	add	r7, sp, #0
 8005040:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005054:	68d9      	ldr	r1, [r3, #12]
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	ea40 0301 	orr.w	r3, r0, r1
 8005060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	431a      	orrs	r2, r3
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	431a      	orrs	r2, r3
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005090:	f021 010c 	bic.w	r1, r1, #12
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800509e:	430b      	orrs	r3, r1
 80050a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b2:	6999      	ldr	r1, [r3, #24]
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	ea40 0301 	orr.w	r3, r0, r1
 80050be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b8f      	ldr	r3, [pc, #572]	; (8005304 <UART_SetConfig+0x2cc>)
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d005      	beq.n	80050d8 <UART_SetConfig+0xa0>
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b8d      	ldr	r3, [pc, #564]	; (8005308 <UART_SetConfig+0x2d0>)
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d104      	bne.n	80050e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050d8:	f7fe fa1c 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 80050dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050e0:	e003      	b.n	80050ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050e2:	f7fe fa03 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 80050e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f4:	f040 810c 	bne.w	8005310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005102:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800510a:	4622      	mov	r2, r4
 800510c:	462b      	mov	r3, r5
 800510e:	1891      	adds	r1, r2, r2
 8005110:	65b9      	str	r1, [r7, #88]	; 0x58
 8005112:	415b      	adcs	r3, r3
 8005114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800511a:	4621      	mov	r1, r4
 800511c:	eb12 0801 	adds.w	r8, r2, r1
 8005120:	4629      	mov	r1, r5
 8005122:	eb43 0901 	adc.w	r9, r3, r1
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800513a:	4690      	mov	r8, r2
 800513c:	4699      	mov	r9, r3
 800513e:	4623      	mov	r3, r4
 8005140:	eb18 0303 	adds.w	r3, r8, r3
 8005144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005148:	462b      	mov	r3, r5
 800514a:	eb49 0303 	adc.w	r3, r9, r3
 800514e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800515e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005166:	460b      	mov	r3, r1
 8005168:	18db      	adds	r3, r3, r3
 800516a:	653b      	str	r3, [r7, #80]	; 0x50
 800516c:	4613      	mov	r3, r2
 800516e:	eb42 0303 	adc.w	r3, r2, r3
 8005172:	657b      	str	r3, [r7, #84]	; 0x54
 8005174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800517c:	f7fb fc76 	bl	8000a6c <__aeabi_uldivmod>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4b61      	ldr	r3, [pc, #388]	; (800530c <UART_SetConfig+0x2d4>)
 8005186:	fba3 2302 	umull	r2, r3, r3, r2
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	011c      	lsls	r4, r3, #4
 800518e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005198:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800519c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051a0:	4642      	mov	r2, r8
 80051a2:	464b      	mov	r3, r9
 80051a4:	1891      	adds	r1, r2, r2
 80051a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80051a8:	415b      	adcs	r3, r3
 80051aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051b0:	4641      	mov	r1, r8
 80051b2:	eb12 0a01 	adds.w	sl, r2, r1
 80051b6:	4649      	mov	r1, r9
 80051b8:	eb43 0b01 	adc.w	fp, r3, r1
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051d0:	4692      	mov	sl, r2
 80051d2:	469b      	mov	fp, r3
 80051d4:	4643      	mov	r3, r8
 80051d6:	eb1a 0303 	adds.w	r3, sl, r3
 80051da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051de:	464b      	mov	r3, r9
 80051e0:	eb4b 0303 	adc.w	r3, fp, r3
 80051e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051fc:	460b      	mov	r3, r1
 80051fe:	18db      	adds	r3, r3, r3
 8005200:	643b      	str	r3, [r7, #64]	; 0x40
 8005202:	4613      	mov	r3, r2
 8005204:	eb42 0303 	adc.w	r3, r2, r3
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
 800520a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800520e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005212:	f7fb fc2b 	bl	8000a6c <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4611      	mov	r1, r2
 800521c:	4b3b      	ldr	r3, [pc, #236]	; (800530c <UART_SetConfig+0x2d4>)
 800521e:	fba3 2301 	umull	r2, r3, r3, r1
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2264      	movs	r2, #100	; 0x64
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	1acb      	subs	r3, r1, r3
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005232:	4b36      	ldr	r3, [pc, #216]	; (800530c <UART_SetConfig+0x2d4>)
 8005234:	fba3 2302 	umull	r2, r3, r3, r2
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005240:	441c      	add	r4, r3
 8005242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005246:	2200      	movs	r2, #0
 8005248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800524c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	1891      	adds	r1, r2, r2
 800525a:	63b9      	str	r1, [r7, #56]	; 0x38
 800525c:	415b      	adcs	r3, r3
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005264:	4641      	mov	r1, r8
 8005266:	1851      	adds	r1, r2, r1
 8005268:	6339      	str	r1, [r7, #48]	; 0x30
 800526a:	4649      	mov	r1, r9
 800526c:	414b      	adcs	r3, r1
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800527c:	4659      	mov	r1, fp
 800527e:	00cb      	lsls	r3, r1, #3
 8005280:	4651      	mov	r1, sl
 8005282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005286:	4651      	mov	r1, sl
 8005288:	00ca      	lsls	r2, r1, #3
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	4603      	mov	r3, r0
 8005290:	4642      	mov	r2, r8
 8005292:	189b      	adds	r3, r3, r2
 8005294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005298:	464b      	mov	r3, r9
 800529a:	460a      	mov	r2, r1
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052b8:	460b      	mov	r3, r1
 80052ba:	18db      	adds	r3, r3, r3
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	4613      	mov	r3, r2
 80052c0:	eb42 0303 	adc.w	r3, r2, r3
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052ce:	f7fb fbcd 	bl	8000a6c <__aeabi_uldivmod>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <UART_SetConfig+0x2d4>)
 80052d8:	fba3 1302 	umull	r1, r3, r3, r2
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	2164      	movs	r1, #100	; 0x64
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	3332      	adds	r3, #50	; 0x32
 80052ea:	4a08      	ldr	r2, [pc, #32]	; (800530c <UART_SetConfig+0x2d4>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	f003 0207 	and.w	r2, r3, #7
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4422      	add	r2, r4
 80052fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005300:	e106      	b.n	8005510 <UART_SetConfig+0x4d8>
 8005302:	bf00      	nop
 8005304:	40011000 	.word	0x40011000
 8005308:	40011400 	.word	0x40011400
 800530c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800531a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800531e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005322:	4642      	mov	r2, r8
 8005324:	464b      	mov	r3, r9
 8005326:	1891      	adds	r1, r2, r2
 8005328:	6239      	str	r1, [r7, #32]
 800532a:	415b      	adcs	r3, r3
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
 800532e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005332:	4641      	mov	r1, r8
 8005334:	1854      	adds	r4, r2, r1
 8005336:	4649      	mov	r1, r9
 8005338:	eb43 0501 	adc.w	r5, r3, r1
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	00eb      	lsls	r3, r5, #3
 8005346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800534a:	00e2      	lsls	r2, r4, #3
 800534c:	4614      	mov	r4, r2
 800534e:	461d      	mov	r5, r3
 8005350:	4643      	mov	r3, r8
 8005352:	18e3      	adds	r3, r4, r3
 8005354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005358:	464b      	mov	r3, r9
 800535a:	eb45 0303 	adc.w	r3, r5, r3
 800535e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800536e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800537e:	4629      	mov	r1, r5
 8005380:	008b      	lsls	r3, r1, #2
 8005382:	4621      	mov	r1, r4
 8005384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005388:	4621      	mov	r1, r4
 800538a:	008a      	lsls	r2, r1, #2
 800538c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005390:	f7fb fb6c 	bl	8000a6c <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4b60      	ldr	r3, [pc, #384]	; (800551c <UART_SetConfig+0x4e4>)
 800539a:	fba3 2302 	umull	r2, r3, r3, r2
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	011c      	lsls	r4, r3, #4
 80053a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053b4:	4642      	mov	r2, r8
 80053b6:	464b      	mov	r3, r9
 80053b8:	1891      	adds	r1, r2, r2
 80053ba:	61b9      	str	r1, [r7, #24]
 80053bc:	415b      	adcs	r3, r3
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c4:	4641      	mov	r1, r8
 80053c6:	1851      	adds	r1, r2, r1
 80053c8:	6139      	str	r1, [r7, #16]
 80053ca:	4649      	mov	r1, r9
 80053cc:	414b      	adcs	r3, r1
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053dc:	4659      	mov	r1, fp
 80053de:	00cb      	lsls	r3, r1, #3
 80053e0:	4651      	mov	r1, sl
 80053e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053e6:	4651      	mov	r1, sl
 80053e8:	00ca      	lsls	r2, r1, #3
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	4642      	mov	r2, r8
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053f8:	464b      	mov	r3, r9
 80053fa:	460a      	mov	r2, r1
 80053fc:	eb42 0303 	adc.w	r3, r2, r3
 8005400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	67bb      	str	r3, [r7, #120]	; 0x78
 800540e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800541c:	4649      	mov	r1, r9
 800541e:	008b      	lsls	r3, r1, #2
 8005420:	4641      	mov	r1, r8
 8005422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005426:	4641      	mov	r1, r8
 8005428:	008a      	lsls	r2, r1, #2
 800542a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800542e:	f7fb fb1d 	bl	8000a6c <__aeabi_uldivmod>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4611      	mov	r1, r2
 8005438:	4b38      	ldr	r3, [pc, #224]	; (800551c <UART_SetConfig+0x4e4>)
 800543a:	fba3 2301 	umull	r2, r3, r3, r1
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2264      	movs	r2, #100	; 0x64
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	1acb      	subs	r3, r1, r3
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	3332      	adds	r3, #50	; 0x32
 800544c:	4a33      	ldr	r2, [pc, #204]	; (800551c <UART_SetConfig+0x4e4>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005458:	441c      	add	r4, r3
 800545a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545e:	2200      	movs	r2, #0
 8005460:	673b      	str	r3, [r7, #112]	; 0x70
 8005462:	677a      	str	r2, [r7, #116]	; 0x74
 8005464:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	1891      	adds	r1, r2, r2
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	415b      	adcs	r3, r3
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005478:	4641      	mov	r1, r8
 800547a:	1851      	adds	r1, r2, r1
 800547c:	6039      	str	r1, [r7, #0]
 800547e:	4649      	mov	r1, r9
 8005480:	414b      	adcs	r3, r1
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005490:	4659      	mov	r1, fp
 8005492:	00cb      	lsls	r3, r1, #3
 8005494:	4651      	mov	r1, sl
 8005496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800549a:	4651      	mov	r1, sl
 800549c:	00ca      	lsls	r2, r1, #3
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	4642      	mov	r2, r8
 80054a6:	189b      	adds	r3, r3, r2
 80054a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80054aa:	464b      	mov	r3, r9
 80054ac:	460a      	mov	r2, r1
 80054ae:	eb42 0303 	adc.w	r3, r2, r3
 80054b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	663b      	str	r3, [r7, #96]	; 0x60
 80054be:	667a      	str	r2, [r7, #100]	; 0x64
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054cc:	4649      	mov	r1, r9
 80054ce:	008b      	lsls	r3, r1, #2
 80054d0:	4641      	mov	r1, r8
 80054d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d6:	4641      	mov	r1, r8
 80054d8:	008a      	lsls	r2, r1, #2
 80054da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054de:	f7fb fac5 	bl	8000a6c <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4b0d      	ldr	r3, [pc, #52]	; (800551c <UART_SetConfig+0x4e4>)
 80054e8:	fba3 1302 	umull	r1, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	2164      	movs	r1, #100	; 0x64
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	3332      	adds	r3, #50	; 0x32
 80054fa:	4a08      	ldr	r2, [pc, #32]	; (800551c <UART_SetConfig+0x4e4>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	f003 020f 	and.w	r2, r3, #15
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4422      	add	r2, r4
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005516:	46bd      	mov	sp, r7
 8005518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800551c:	51eb851f 	.word	0x51eb851f

08005520 <_vsiprintf_r>:
 8005520:	b500      	push	{lr}
 8005522:	b09b      	sub	sp, #108	; 0x6c
 8005524:	9100      	str	r1, [sp, #0]
 8005526:	9104      	str	r1, [sp, #16]
 8005528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800552c:	9105      	str	r1, [sp, #20]
 800552e:	9102      	str	r1, [sp, #8]
 8005530:	4905      	ldr	r1, [pc, #20]	; (8005548 <_vsiprintf_r+0x28>)
 8005532:	9103      	str	r1, [sp, #12]
 8005534:	4669      	mov	r1, sp
 8005536:	f000 f999 	bl	800586c <_svfiprintf_r>
 800553a:	9b00      	ldr	r3, [sp, #0]
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	b01b      	add	sp, #108	; 0x6c
 8005542:	f85d fb04 	ldr.w	pc, [sp], #4
 8005546:	bf00      	nop
 8005548:	ffff0208 	.word	0xffff0208

0800554c <vsiprintf>:
 800554c:	4613      	mov	r3, r2
 800554e:	460a      	mov	r2, r1
 8005550:	4601      	mov	r1, r0
 8005552:	4802      	ldr	r0, [pc, #8]	; (800555c <vsiprintf+0x10>)
 8005554:	6800      	ldr	r0, [r0, #0]
 8005556:	f7ff bfe3 	b.w	8005520 <_vsiprintf_r>
 800555a:	bf00      	nop
 800555c:	2000005c 	.word	0x2000005c

08005560 <memset>:
 8005560:	4402      	add	r2, r0
 8005562:	4603      	mov	r3, r0
 8005564:	4293      	cmp	r3, r2
 8005566:	d100      	bne.n	800556a <memset+0xa>
 8005568:	4770      	bx	lr
 800556a:	f803 1b01 	strb.w	r1, [r3], #1
 800556e:	e7f9      	b.n	8005564 <memset+0x4>

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	; (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	2000005c 	.word	0x2000005c

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	; (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	; (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	; (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	; (80055c0 <__libc_init_array+0x44>)
 8005590:	f000 fc6a 	bl	8005e68 <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	08005ef0 	.word	0x08005ef0
 80055b8:	08005ef0 	.word	0x08005ef0
 80055bc:	08005ef0 	.word	0x08005ef0
 80055c0:	08005ef4 	.word	0x08005ef4

080055c4 <__retarget_lock_acquire_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <__retarget_lock_release_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <_free_r>:
 80055c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ca:	2900      	cmp	r1, #0
 80055cc:	d044      	beq.n	8005658 <_free_r+0x90>
 80055ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d2:	9001      	str	r0, [sp, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f1a1 0404 	sub.w	r4, r1, #4
 80055da:	bfb8      	it	lt
 80055dc:	18e4      	addlt	r4, r4, r3
 80055de:	f000 f8df 	bl	80057a0 <__malloc_lock>
 80055e2:	4a1e      	ldr	r2, [pc, #120]	; (800565c <_free_r+0x94>)
 80055e4:	9801      	ldr	r0, [sp, #4]
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	b933      	cbnz	r3, 80055f8 <_free_r+0x30>
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	6014      	str	r4, [r2, #0]
 80055ee:	b003      	add	sp, #12
 80055f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055f4:	f000 b8da 	b.w	80057ac <__malloc_unlock>
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d908      	bls.n	800560e <_free_r+0x46>
 80055fc:	6825      	ldr	r5, [r4, #0]
 80055fe:	1961      	adds	r1, r4, r5
 8005600:	428b      	cmp	r3, r1
 8005602:	bf01      	itttt	eq
 8005604:	6819      	ldreq	r1, [r3, #0]
 8005606:	685b      	ldreq	r3, [r3, #4]
 8005608:	1949      	addeq	r1, r1, r5
 800560a:	6021      	streq	r1, [r4, #0]
 800560c:	e7ed      	b.n	80055ea <_free_r+0x22>
 800560e:	461a      	mov	r2, r3
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b10b      	cbz	r3, 8005618 <_free_r+0x50>
 8005614:	42a3      	cmp	r3, r4
 8005616:	d9fa      	bls.n	800560e <_free_r+0x46>
 8005618:	6811      	ldr	r1, [r2, #0]
 800561a:	1855      	adds	r5, r2, r1
 800561c:	42a5      	cmp	r5, r4
 800561e:	d10b      	bne.n	8005638 <_free_r+0x70>
 8005620:	6824      	ldr	r4, [r4, #0]
 8005622:	4421      	add	r1, r4
 8005624:	1854      	adds	r4, r2, r1
 8005626:	42a3      	cmp	r3, r4
 8005628:	6011      	str	r1, [r2, #0]
 800562a:	d1e0      	bne.n	80055ee <_free_r+0x26>
 800562c:	681c      	ldr	r4, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	6053      	str	r3, [r2, #4]
 8005632:	440c      	add	r4, r1
 8005634:	6014      	str	r4, [r2, #0]
 8005636:	e7da      	b.n	80055ee <_free_r+0x26>
 8005638:	d902      	bls.n	8005640 <_free_r+0x78>
 800563a:	230c      	movs	r3, #12
 800563c:	6003      	str	r3, [r0, #0]
 800563e:	e7d6      	b.n	80055ee <_free_r+0x26>
 8005640:	6825      	ldr	r5, [r4, #0]
 8005642:	1961      	adds	r1, r4, r5
 8005644:	428b      	cmp	r3, r1
 8005646:	bf04      	itt	eq
 8005648:	6819      	ldreq	r1, [r3, #0]
 800564a:	685b      	ldreq	r3, [r3, #4]
 800564c:	6063      	str	r3, [r4, #4]
 800564e:	bf04      	itt	eq
 8005650:	1949      	addeq	r1, r1, r5
 8005652:	6021      	streq	r1, [r4, #0]
 8005654:	6054      	str	r4, [r2, #4]
 8005656:	e7ca      	b.n	80055ee <_free_r+0x26>
 8005658:	b003      	add	sp, #12
 800565a:	bd30      	pop	{r4, r5, pc}
 800565c:	2000031c 	.word	0x2000031c

08005660 <sbrk_aligned>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4e0e      	ldr	r6, [pc, #56]	; (800569c <sbrk_aligned+0x3c>)
 8005664:	460c      	mov	r4, r1
 8005666:	6831      	ldr	r1, [r6, #0]
 8005668:	4605      	mov	r5, r0
 800566a:	b911      	cbnz	r1, 8005672 <sbrk_aligned+0x12>
 800566c:	f000 fba6 	bl	8005dbc <_sbrk_r>
 8005670:	6030      	str	r0, [r6, #0]
 8005672:	4621      	mov	r1, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f000 fba1 	bl	8005dbc <_sbrk_r>
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	d00a      	beq.n	8005694 <sbrk_aligned+0x34>
 800567e:	1cc4      	adds	r4, r0, #3
 8005680:	f024 0403 	bic.w	r4, r4, #3
 8005684:	42a0      	cmp	r0, r4
 8005686:	d007      	beq.n	8005698 <sbrk_aligned+0x38>
 8005688:	1a21      	subs	r1, r4, r0
 800568a:	4628      	mov	r0, r5
 800568c:	f000 fb96 	bl	8005dbc <_sbrk_r>
 8005690:	3001      	adds	r0, #1
 8005692:	d101      	bne.n	8005698 <sbrk_aligned+0x38>
 8005694:	f04f 34ff 	mov.w	r4, #4294967295
 8005698:	4620      	mov	r0, r4
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	20000320 	.word	0x20000320

080056a0 <_malloc_r>:
 80056a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a4:	1ccd      	adds	r5, r1, #3
 80056a6:	f025 0503 	bic.w	r5, r5, #3
 80056aa:	3508      	adds	r5, #8
 80056ac:	2d0c      	cmp	r5, #12
 80056ae:	bf38      	it	cc
 80056b0:	250c      	movcc	r5, #12
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	4607      	mov	r7, r0
 80056b6:	db01      	blt.n	80056bc <_malloc_r+0x1c>
 80056b8:	42a9      	cmp	r1, r5
 80056ba:	d905      	bls.n	80056c8 <_malloc_r+0x28>
 80056bc:	230c      	movs	r3, #12
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	2600      	movs	r6, #0
 80056c2:	4630      	mov	r0, r6
 80056c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800579c <_malloc_r+0xfc>
 80056cc:	f000 f868 	bl	80057a0 <__malloc_lock>
 80056d0:	f8d8 3000 	ldr.w	r3, [r8]
 80056d4:	461c      	mov	r4, r3
 80056d6:	bb5c      	cbnz	r4, 8005730 <_malloc_r+0x90>
 80056d8:	4629      	mov	r1, r5
 80056da:	4638      	mov	r0, r7
 80056dc:	f7ff ffc0 	bl	8005660 <sbrk_aligned>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	4604      	mov	r4, r0
 80056e4:	d155      	bne.n	8005792 <_malloc_r+0xf2>
 80056e6:	f8d8 4000 	ldr.w	r4, [r8]
 80056ea:	4626      	mov	r6, r4
 80056ec:	2e00      	cmp	r6, #0
 80056ee:	d145      	bne.n	800577c <_malloc_r+0xdc>
 80056f0:	2c00      	cmp	r4, #0
 80056f2:	d048      	beq.n	8005786 <_malloc_r+0xe6>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	4631      	mov	r1, r6
 80056f8:	4638      	mov	r0, r7
 80056fa:	eb04 0903 	add.w	r9, r4, r3
 80056fe:	f000 fb5d 	bl	8005dbc <_sbrk_r>
 8005702:	4581      	cmp	r9, r0
 8005704:	d13f      	bne.n	8005786 <_malloc_r+0xe6>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	1a6d      	subs	r5, r5, r1
 800570a:	4629      	mov	r1, r5
 800570c:	4638      	mov	r0, r7
 800570e:	f7ff ffa7 	bl	8005660 <sbrk_aligned>
 8005712:	3001      	adds	r0, #1
 8005714:	d037      	beq.n	8005786 <_malloc_r+0xe6>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	442b      	add	r3, r5
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	f8d8 3000 	ldr.w	r3, [r8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d038      	beq.n	8005796 <_malloc_r+0xf6>
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	42a2      	cmp	r2, r4
 8005728:	d12b      	bne.n	8005782 <_malloc_r+0xe2>
 800572a:	2200      	movs	r2, #0
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	e00f      	b.n	8005750 <_malloc_r+0xb0>
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	1b52      	subs	r2, r2, r5
 8005734:	d41f      	bmi.n	8005776 <_malloc_r+0xd6>
 8005736:	2a0b      	cmp	r2, #11
 8005738:	d917      	bls.n	800576a <_malloc_r+0xca>
 800573a:	1961      	adds	r1, r4, r5
 800573c:	42a3      	cmp	r3, r4
 800573e:	6025      	str	r5, [r4, #0]
 8005740:	bf18      	it	ne
 8005742:	6059      	strne	r1, [r3, #4]
 8005744:	6863      	ldr	r3, [r4, #4]
 8005746:	bf08      	it	eq
 8005748:	f8c8 1000 	streq.w	r1, [r8]
 800574c:	5162      	str	r2, [r4, r5]
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	4638      	mov	r0, r7
 8005752:	f104 060b 	add.w	r6, r4, #11
 8005756:	f000 f829 	bl	80057ac <__malloc_unlock>
 800575a:	f026 0607 	bic.w	r6, r6, #7
 800575e:	1d23      	adds	r3, r4, #4
 8005760:	1af2      	subs	r2, r6, r3
 8005762:	d0ae      	beq.n	80056c2 <_malloc_r+0x22>
 8005764:	1b9b      	subs	r3, r3, r6
 8005766:	50a3      	str	r3, [r4, r2]
 8005768:	e7ab      	b.n	80056c2 <_malloc_r+0x22>
 800576a:	42a3      	cmp	r3, r4
 800576c:	6862      	ldr	r2, [r4, #4]
 800576e:	d1dd      	bne.n	800572c <_malloc_r+0x8c>
 8005770:	f8c8 2000 	str.w	r2, [r8]
 8005774:	e7ec      	b.n	8005750 <_malloc_r+0xb0>
 8005776:	4623      	mov	r3, r4
 8005778:	6864      	ldr	r4, [r4, #4]
 800577a:	e7ac      	b.n	80056d6 <_malloc_r+0x36>
 800577c:	4634      	mov	r4, r6
 800577e:	6876      	ldr	r6, [r6, #4]
 8005780:	e7b4      	b.n	80056ec <_malloc_r+0x4c>
 8005782:	4613      	mov	r3, r2
 8005784:	e7cc      	b.n	8005720 <_malloc_r+0x80>
 8005786:	230c      	movs	r3, #12
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4638      	mov	r0, r7
 800578c:	f000 f80e 	bl	80057ac <__malloc_unlock>
 8005790:	e797      	b.n	80056c2 <_malloc_r+0x22>
 8005792:	6025      	str	r5, [r4, #0]
 8005794:	e7dc      	b.n	8005750 <_malloc_r+0xb0>
 8005796:	605b      	str	r3, [r3, #4]
 8005798:	deff      	udf	#255	; 0xff
 800579a:	bf00      	nop
 800579c:	2000031c 	.word	0x2000031c

080057a0 <__malloc_lock>:
 80057a0:	4801      	ldr	r0, [pc, #4]	; (80057a8 <__malloc_lock+0x8>)
 80057a2:	f7ff bf0f 	b.w	80055c4 <__retarget_lock_acquire_recursive>
 80057a6:	bf00      	nop
 80057a8:	20000318 	.word	0x20000318

080057ac <__malloc_unlock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_unlock+0x8>)
 80057ae:	f7ff bf0a 	b.w	80055c6 <__retarget_lock_release_recursive>
 80057b2:	bf00      	nop
 80057b4:	20000318 	.word	0x20000318

080057b8 <__ssputs_r>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	688e      	ldr	r6, [r1, #8]
 80057be:	461f      	mov	r7, r3
 80057c0:	42be      	cmp	r6, r7
 80057c2:	680b      	ldr	r3, [r1, #0]
 80057c4:	4682      	mov	sl, r0
 80057c6:	460c      	mov	r4, r1
 80057c8:	4690      	mov	r8, r2
 80057ca:	d82c      	bhi.n	8005826 <__ssputs_r+0x6e>
 80057cc:	898a      	ldrh	r2, [r1, #12]
 80057ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057d2:	d026      	beq.n	8005822 <__ssputs_r+0x6a>
 80057d4:	6965      	ldr	r5, [r4, #20]
 80057d6:	6909      	ldr	r1, [r1, #16]
 80057d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057dc:	eba3 0901 	sub.w	r9, r3, r1
 80057e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057e4:	1c7b      	adds	r3, r7, #1
 80057e6:	444b      	add	r3, r9
 80057e8:	106d      	asrs	r5, r5, #1
 80057ea:	429d      	cmp	r5, r3
 80057ec:	bf38      	it	cc
 80057ee:	461d      	movcc	r5, r3
 80057f0:	0553      	lsls	r3, r2, #21
 80057f2:	d527      	bpl.n	8005844 <__ssputs_r+0x8c>
 80057f4:	4629      	mov	r1, r5
 80057f6:	f7ff ff53 	bl	80056a0 <_malloc_r>
 80057fa:	4606      	mov	r6, r0
 80057fc:	b360      	cbz	r0, 8005858 <__ssputs_r+0xa0>
 80057fe:	6921      	ldr	r1, [r4, #16]
 8005800:	464a      	mov	r2, r9
 8005802:	f000 faeb 	bl	8005ddc <memcpy>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	6126      	str	r6, [r4, #16]
 8005814:	6165      	str	r5, [r4, #20]
 8005816:	444e      	add	r6, r9
 8005818:	eba5 0509 	sub.w	r5, r5, r9
 800581c:	6026      	str	r6, [r4, #0]
 800581e:	60a5      	str	r5, [r4, #8]
 8005820:	463e      	mov	r6, r7
 8005822:	42be      	cmp	r6, r7
 8005824:	d900      	bls.n	8005828 <__ssputs_r+0x70>
 8005826:	463e      	mov	r6, r7
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	4632      	mov	r2, r6
 800582c:	4641      	mov	r1, r8
 800582e:	f000 faab 	bl	8005d88 <memmove>
 8005832:	68a3      	ldr	r3, [r4, #8]
 8005834:	1b9b      	subs	r3, r3, r6
 8005836:	60a3      	str	r3, [r4, #8]
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	4433      	add	r3, r6
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	2000      	movs	r0, #0
 8005840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005844:	462a      	mov	r2, r5
 8005846:	f000 fad7 	bl	8005df8 <_realloc_r>
 800584a:	4606      	mov	r6, r0
 800584c:	2800      	cmp	r0, #0
 800584e:	d1e0      	bne.n	8005812 <__ssputs_r+0x5a>
 8005850:	6921      	ldr	r1, [r4, #16]
 8005852:	4650      	mov	r0, sl
 8005854:	f7ff feb8 	bl	80055c8 <_free_r>
 8005858:	230c      	movs	r3, #12
 800585a:	f8ca 3000 	str.w	r3, [sl]
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	f04f 30ff 	mov.w	r0, #4294967295
 800586a:	e7e9      	b.n	8005840 <__ssputs_r+0x88>

0800586c <_svfiprintf_r>:
 800586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	4698      	mov	r8, r3
 8005872:	898b      	ldrh	r3, [r1, #12]
 8005874:	061b      	lsls	r3, r3, #24
 8005876:	b09d      	sub	sp, #116	; 0x74
 8005878:	4607      	mov	r7, r0
 800587a:	460d      	mov	r5, r1
 800587c:	4614      	mov	r4, r2
 800587e:	d50e      	bpl.n	800589e <_svfiprintf_r+0x32>
 8005880:	690b      	ldr	r3, [r1, #16]
 8005882:	b963      	cbnz	r3, 800589e <_svfiprintf_r+0x32>
 8005884:	2140      	movs	r1, #64	; 0x40
 8005886:	f7ff ff0b 	bl	80056a0 <_malloc_r>
 800588a:	6028      	str	r0, [r5, #0]
 800588c:	6128      	str	r0, [r5, #16]
 800588e:	b920      	cbnz	r0, 800589a <_svfiprintf_r+0x2e>
 8005890:	230c      	movs	r3, #12
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	e0d0      	b.n	8005a3c <_svfiprintf_r+0x1d0>
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	616b      	str	r3, [r5, #20]
 800589e:	2300      	movs	r3, #0
 80058a0:	9309      	str	r3, [sp, #36]	; 0x24
 80058a2:	2320      	movs	r3, #32
 80058a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ac:	2330      	movs	r3, #48	; 0x30
 80058ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a54 <_svfiprintf_r+0x1e8>
 80058b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058b6:	f04f 0901 	mov.w	r9, #1
 80058ba:	4623      	mov	r3, r4
 80058bc:	469a      	mov	sl, r3
 80058be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058c2:	b10a      	cbz	r2, 80058c8 <_svfiprintf_r+0x5c>
 80058c4:	2a25      	cmp	r2, #37	; 0x25
 80058c6:	d1f9      	bne.n	80058bc <_svfiprintf_r+0x50>
 80058c8:	ebba 0b04 	subs.w	fp, sl, r4
 80058cc:	d00b      	beq.n	80058e6 <_svfiprintf_r+0x7a>
 80058ce:	465b      	mov	r3, fp
 80058d0:	4622      	mov	r2, r4
 80058d2:	4629      	mov	r1, r5
 80058d4:	4638      	mov	r0, r7
 80058d6:	f7ff ff6f 	bl	80057b8 <__ssputs_r>
 80058da:	3001      	adds	r0, #1
 80058dc:	f000 80a9 	beq.w	8005a32 <_svfiprintf_r+0x1c6>
 80058e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e2:	445a      	add	r2, fp
 80058e4:	9209      	str	r2, [sp, #36]	; 0x24
 80058e6:	f89a 3000 	ldrb.w	r3, [sl]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80a1 	beq.w	8005a32 <_svfiprintf_r+0x1c6>
 80058f0:	2300      	movs	r3, #0
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058fa:	f10a 0a01 	add.w	sl, sl, #1
 80058fe:	9304      	str	r3, [sp, #16]
 8005900:	9307      	str	r3, [sp, #28]
 8005902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005906:	931a      	str	r3, [sp, #104]	; 0x68
 8005908:	4654      	mov	r4, sl
 800590a:	2205      	movs	r2, #5
 800590c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005910:	4850      	ldr	r0, [pc, #320]	; (8005a54 <_svfiprintf_r+0x1e8>)
 8005912:	f7fa fc6d 	bl	80001f0 <memchr>
 8005916:	9a04      	ldr	r2, [sp, #16]
 8005918:	b9d8      	cbnz	r0, 8005952 <_svfiprintf_r+0xe6>
 800591a:	06d0      	lsls	r0, r2, #27
 800591c:	bf44      	itt	mi
 800591e:	2320      	movmi	r3, #32
 8005920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005924:	0711      	lsls	r1, r2, #28
 8005926:	bf44      	itt	mi
 8005928:	232b      	movmi	r3, #43	; 0x2b
 800592a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800592e:	f89a 3000 	ldrb.w	r3, [sl]
 8005932:	2b2a      	cmp	r3, #42	; 0x2a
 8005934:	d015      	beq.n	8005962 <_svfiprintf_r+0xf6>
 8005936:	9a07      	ldr	r2, [sp, #28]
 8005938:	4654      	mov	r4, sl
 800593a:	2000      	movs	r0, #0
 800593c:	f04f 0c0a 	mov.w	ip, #10
 8005940:	4621      	mov	r1, r4
 8005942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005946:	3b30      	subs	r3, #48	; 0x30
 8005948:	2b09      	cmp	r3, #9
 800594a:	d94d      	bls.n	80059e8 <_svfiprintf_r+0x17c>
 800594c:	b1b0      	cbz	r0, 800597c <_svfiprintf_r+0x110>
 800594e:	9207      	str	r2, [sp, #28]
 8005950:	e014      	b.n	800597c <_svfiprintf_r+0x110>
 8005952:	eba0 0308 	sub.w	r3, r0, r8
 8005956:	fa09 f303 	lsl.w	r3, r9, r3
 800595a:	4313      	orrs	r3, r2
 800595c:	9304      	str	r3, [sp, #16]
 800595e:	46a2      	mov	sl, r4
 8005960:	e7d2      	b.n	8005908 <_svfiprintf_r+0x9c>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	1d19      	adds	r1, r3, #4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	9103      	str	r1, [sp, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	bfbb      	ittet	lt
 800596e:	425b      	neglt	r3, r3
 8005970:	f042 0202 	orrlt.w	r2, r2, #2
 8005974:	9307      	strge	r3, [sp, #28]
 8005976:	9307      	strlt	r3, [sp, #28]
 8005978:	bfb8      	it	lt
 800597a:	9204      	strlt	r2, [sp, #16]
 800597c:	7823      	ldrb	r3, [r4, #0]
 800597e:	2b2e      	cmp	r3, #46	; 0x2e
 8005980:	d10c      	bne.n	800599c <_svfiprintf_r+0x130>
 8005982:	7863      	ldrb	r3, [r4, #1]
 8005984:	2b2a      	cmp	r3, #42	; 0x2a
 8005986:	d134      	bne.n	80059f2 <_svfiprintf_r+0x186>
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	1d1a      	adds	r2, r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	9203      	str	r2, [sp, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfb8      	it	lt
 8005994:	f04f 33ff 	movlt.w	r3, #4294967295
 8005998:	3402      	adds	r4, #2
 800599a:	9305      	str	r3, [sp, #20]
 800599c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a64 <_svfiprintf_r+0x1f8>
 80059a0:	7821      	ldrb	r1, [r4, #0]
 80059a2:	2203      	movs	r2, #3
 80059a4:	4650      	mov	r0, sl
 80059a6:	f7fa fc23 	bl	80001f0 <memchr>
 80059aa:	b138      	cbz	r0, 80059bc <_svfiprintf_r+0x150>
 80059ac:	9b04      	ldr	r3, [sp, #16]
 80059ae:	eba0 000a 	sub.w	r0, r0, sl
 80059b2:	2240      	movs	r2, #64	; 0x40
 80059b4:	4082      	lsls	r2, r0
 80059b6:	4313      	orrs	r3, r2
 80059b8:	3401      	adds	r4, #1
 80059ba:	9304      	str	r3, [sp, #16]
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	4825      	ldr	r0, [pc, #148]	; (8005a58 <_svfiprintf_r+0x1ec>)
 80059c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059c6:	2206      	movs	r2, #6
 80059c8:	f7fa fc12 	bl	80001f0 <memchr>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d038      	beq.n	8005a42 <_svfiprintf_r+0x1d6>
 80059d0:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <_svfiprintf_r+0x1f0>)
 80059d2:	bb1b      	cbnz	r3, 8005a1c <_svfiprintf_r+0x1b0>
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	3307      	adds	r3, #7
 80059d8:	f023 0307 	bic.w	r3, r3, #7
 80059dc:	3308      	adds	r3, #8
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	4433      	add	r3, r6
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	e768      	b.n	80058ba <_svfiprintf_r+0x4e>
 80059e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ec:	460c      	mov	r4, r1
 80059ee:	2001      	movs	r0, #1
 80059f0:	e7a6      	b.n	8005940 <_svfiprintf_r+0xd4>
 80059f2:	2300      	movs	r3, #0
 80059f4:	3401      	adds	r4, #1
 80059f6:	9305      	str	r3, [sp, #20]
 80059f8:	4619      	mov	r1, r3
 80059fa:	f04f 0c0a 	mov.w	ip, #10
 80059fe:	4620      	mov	r0, r4
 8005a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a04:	3a30      	subs	r2, #48	; 0x30
 8005a06:	2a09      	cmp	r2, #9
 8005a08:	d903      	bls.n	8005a12 <_svfiprintf_r+0x1a6>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0c6      	beq.n	800599c <_svfiprintf_r+0x130>
 8005a0e:	9105      	str	r1, [sp, #20]
 8005a10:	e7c4      	b.n	800599c <_svfiprintf_r+0x130>
 8005a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a16:	4604      	mov	r4, r0
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e7f0      	b.n	80059fe <_svfiprintf_r+0x192>
 8005a1c:	ab03      	add	r3, sp, #12
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	462a      	mov	r2, r5
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <_svfiprintf_r+0x1f4>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	4638      	mov	r0, r7
 8005a28:	f3af 8000 	nop.w
 8005a2c:	1c42      	adds	r2, r0, #1
 8005a2e:	4606      	mov	r6, r0
 8005a30:	d1d6      	bne.n	80059e0 <_svfiprintf_r+0x174>
 8005a32:	89ab      	ldrh	r3, [r5, #12]
 8005a34:	065b      	lsls	r3, r3, #25
 8005a36:	f53f af2d 	bmi.w	8005894 <_svfiprintf_r+0x28>
 8005a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a3c:	b01d      	add	sp, #116	; 0x74
 8005a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a42:	ab03      	add	r3, sp, #12
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	462a      	mov	r2, r5
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <_svfiprintf_r+0x1f4>)
 8005a4a:	a904      	add	r1, sp, #16
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f000 f879 	bl	8005b44 <_printf_i>
 8005a52:	e7eb      	b.n	8005a2c <_svfiprintf_r+0x1c0>
 8005a54:	08005eb4 	.word	0x08005eb4
 8005a58:	08005ebe 	.word	0x08005ebe
 8005a5c:	00000000 	.word	0x00000000
 8005a60:	080057b9 	.word	0x080057b9
 8005a64:	08005eba 	.word	0x08005eba

08005a68 <_printf_common>:
 8005a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6c:	4616      	mov	r6, r2
 8005a6e:	4699      	mov	r9, r3
 8005a70:	688a      	ldr	r2, [r1, #8]
 8005a72:	690b      	ldr	r3, [r1, #16]
 8005a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	bfb8      	it	lt
 8005a7c:	4613      	movlt	r3, r2
 8005a7e:	6033      	str	r3, [r6, #0]
 8005a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a84:	4607      	mov	r7, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	b10a      	cbz	r2, 8005a8e <_printf_common+0x26>
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	6033      	str	r3, [r6, #0]
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	0699      	lsls	r1, r3, #26
 8005a92:	bf42      	ittt	mi
 8005a94:	6833      	ldrmi	r3, [r6, #0]
 8005a96:	3302      	addmi	r3, #2
 8005a98:	6033      	strmi	r3, [r6, #0]
 8005a9a:	6825      	ldr	r5, [r4, #0]
 8005a9c:	f015 0506 	ands.w	r5, r5, #6
 8005aa0:	d106      	bne.n	8005ab0 <_printf_common+0x48>
 8005aa2:	f104 0a19 	add.w	sl, r4, #25
 8005aa6:	68e3      	ldr	r3, [r4, #12]
 8005aa8:	6832      	ldr	r2, [r6, #0]
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	42ab      	cmp	r3, r5
 8005aae:	dc26      	bgt.n	8005afe <_printf_common+0x96>
 8005ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ab4:	1e13      	subs	r3, r2, #0
 8005ab6:	6822      	ldr	r2, [r4, #0]
 8005ab8:	bf18      	it	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	0692      	lsls	r2, r2, #26
 8005abe:	d42b      	bmi.n	8005b18 <_printf_common+0xb0>
 8005ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	47c0      	blx	r8
 8005aca:	3001      	adds	r0, #1
 8005acc:	d01e      	beq.n	8005b0c <_printf_common+0xa4>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	6922      	ldr	r2, [r4, #16]
 8005ad2:	f003 0306 	and.w	r3, r3, #6
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	bf02      	ittt	eq
 8005ada:	68e5      	ldreq	r5, [r4, #12]
 8005adc:	6833      	ldreq	r3, [r6, #0]
 8005ade:	1aed      	subeq	r5, r5, r3
 8005ae0:	68a3      	ldr	r3, [r4, #8]
 8005ae2:	bf0c      	ite	eq
 8005ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ae8:	2500      	movne	r5, #0
 8005aea:	4293      	cmp	r3, r2
 8005aec:	bfc4      	itt	gt
 8005aee:	1a9b      	subgt	r3, r3, r2
 8005af0:	18ed      	addgt	r5, r5, r3
 8005af2:	2600      	movs	r6, #0
 8005af4:	341a      	adds	r4, #26
 8005af6:	42b5      	cmp	r5, r6
 8005af8:	d11a      	bne.n	8005b30 <_printf_common+0xc8>
 8005afa:	2000      	movs	r0, #0
 8005afc:	e008      	b.n	8005b10 <_printf_common+0xa8>
 8005afe:	2301      	movs	r3, #1
 8005b00:	4652      	mov	r2, sl
 8005b02:	4649      	mov	r1, r9
 8005b04:	4638      	mov	r0, r7
 8005b06:	47c0      	blx	r8
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d103      	bne.n	8005b14 <_printf_common+0xac>
 8005b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b14:	3501      	adds	r5, #1
 8005b16:	e7c6      	b.n	8005aa6 <_printf_common+0x3e>
 8005b18:	18e1      	adds	r1, r4, r3
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	2030      	movs	r0, #48	; 0x30
 8005b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b22:	4422      	add	r2, r4
 8005b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	e7c7      	b.n	8005ac0 <_printf_common+0x58>
 8005b30:	2301      	movs	r3, #1
 8005b32:	4622      	mov	r2, r4
 8005b34:	4649      	mov	r1, r9
 8005b36:	4638      	mov	r0, r7
 8005b38:	47c0      	blx	r8
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	d0e6      	beq.n	8005b0c <_printf_common+0xa4>
 8005b3e:	3601      	adds	r6, #1
 8005b40:	e7d9      	b.n	8005af6 <_printf_common+0x8e>
	...

08005b44 <_printf_i>:
 8005b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b48:	7e0f      	ldrb	r7, [r1, #24]
 8005b4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b4c:	2f78      	cmp	r7, #120	; 0x78
 8005b4e:	4691      	mov	r9, r2
 8005b50:	4680      	mov	r8, r0
 8005b52:	460c      	mov	r4, r1
 8005b54:	469a      	mov	sl, r3
 8005b56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b5a:	d807      	bhi.n	8005b6c <_printf_i+0x28>
 8005b5c:	2f62      	cmp	r7, #98	; 0x62
 8005b5e:	d80a      	bhi.n	8005b76 <_printf_i+0x32>
 8005b60:	2f00      	cmp	r7, #0
 8005b62:	f000 80d4 	beq.w	8005d0e <_printf_i+0x1ca>
 8005b66:	2f58      	cmp	r7, #88	; 0x58
 8005b68:	f000 80c0 	beq.w	8005cec <_printf_i+0x1a8>
 8005b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b74:	e03a      	b.n	8005bec <_printf_i+0xa8>
 8005b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b7a:	2b15      	cmp	r3, #21
 8005b7c:	d8f6      	bhi.n	8005b6c <_printf_i+0x28>
 8005b7e:	a101      	add	r1, pc, #4	; (adr r1, 8005b84 <_printf_i+0x40>)
 8005b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b84:	08005bdd 	.word	0x08005bdd
 8005b88:	08005bf1 	.word	0x08005bf1
 8005b8c:	08005b6d 	.word	0x08005b6d
 8005b90:	08005b6d 	.word	0x08005b6d
 8005b94:	08005b6d 	.word	0x08005b6d
 8005b98:	08005b6d 	.word	0x08005b6d
 8005b9c:	08005bf1 	.word	0x08005bf1
 8005ba0:	08005b6d 	.word	0x08005b6d
 8005ba4:	08005b6d 	.word	0x08005b6d
 8005ba8:	08005b6d 	.word	0x08005b6d
 8005bac:	08005b6d 	.word	0x08005b6d
 8005bb0:	08005cf5 	.word	0x08005cf5
 8005bb4:	08005c1d 	.word	0x08005c1d
 8005bb8:	08005caf 	.word	0x08005caf
 8005bbc:	08005b6d 	.word	0x08005b6d
 8005bc0:	08005b6d 	.word	0x08005b6d
 8005bc4:	08005d17 	.word	0x08005d17
 8005bc8:	08005b6d 	.word	0x08005b6d
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	08005b6d 	.word	0x08005b6d
 8005bd4:	08005b6d 	.word	0x08005b6d
 8005bd8:	08005cb7 	.word	0x08005cb7
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	1d1a      	adds	r2, r3, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	602a      	str	r2, [r5, #0]
 8005be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bec:	2301      	movs	r3, #1
 8005bee:	e09f      	b.n	8005d30 <_printf_i+0x1ec>
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	682b      	ldr	r3, [r5, #0]
 8005bf4:	0607      	lsls	r7, r0, #24
 8005bf6:	f103 0104 	add.w	r1, r3, #4
 8005bfa:	6029      	str	r1, [r5, #0]
 8005bfc:	d501      	bpl.n	8005c02 <_printf_i+0xbe>
 8005bfe:	681e      	ldr	r6, [r3, #0]
 8005c00:	e003      	b.n	8005c0a <_printf_i+0xc6>
 8005c02:	0646      	lsls	r6, r0, #25
 8005c04:	d5fb      	bpl.n	8005bfe <_printf_i+0xba>
 8005c06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c0a:	2e00      	cmp	r6, #0
 8005c0c:	da03      	bge.n	8005c16 <_printf_i+0xd2>
 8005c0e:	232d      	movs	r3, #45	; 0x2d
 8005c10:	4276      	negs	r6, r6
 8005c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c16:	485a      	ldr	r0, [pc, #360]	; (8005d80 <_printf_i+0x23c>)
 8005c18:	230a      	movs	r3, #10
 8005c1a:	e012      	b.n	8005c42 <_printf_i+0xfe>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	6029      	str	r1, [r5, #0]
 8005c24:	0605      	lsls	r5, r0, #24
 8005c26:	d501      	bpl.n	8005c2c <_printf_i+0xe8>
 8005c28:	681e      	ldr	r6, [r3, #0]
 8005c2a:	e002      	b.n	8005c32 <_printf_i+0xee>
 8005c2c:	0641      	lsls	r1, r0, #25
 8005c2e:	d5fb      	bpl.n	8005c28 <_printf_i+0xe4>
 8005c30:	881e      	ldrh	r6, [r3, #0]
 8005c32:	4853      	ldr	r0, [pc, #332]	; (8005d80 <_printf_i+0x23c>)
 8005c34:	2f6f      	cmp	r7, #111	; 0x6f
 8005c36:	bf0c      	ite	eq
 8005c38:	2308      	moveq	r3, #8
 8005c3a:	230a      	movne	r3, #10
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c42:	6865      	ldr	r5, [r4, #4]
 8005c44:	60a5      	str	r5, [r4, #8]
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	bfa2      	ittt	ge
 8005c4a:	6821      	ldrge	r1, [r4, #0]
 8005c4c:	f021 0104 	bicge.w	r1, r1, #4
 8005c50:	6021      	strge	r1, [r4, #0]
 8005c52:	b90e      	cbnz	r6, 8005c58 <_printf_i+0x114>
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	d04b      	beq.n	8005cf0 <_printf_i+0x1ac>
 8005c58:	4615      	mov	r5, r2
 8005c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c62:	5dc7      	ldrb	r7, [r0, r7]
 8005c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c68:	4637      	mov	r7, r6
 8005c6a:	42bb      	cmp	r3, r7
 8005c6c:	460e      	mov	r6, r1
 8005c6e:	d9f4      	bls.n	8005c5a <_printf_i+0x116>
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d10b      	bne.n	8005c8c <_printf_i+0x148>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	07de      	lsls	r6, r3, #31
 8005c78:	d508      	bpl.n	8005c8c <_printf_i+0x148>
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	6861      	ldr	r1, [r4, #4]
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	bfde      	ittt	le
 8005c82:	2330      	movle	r3, #48	; 0x30
 8005c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c8c:	1b52      	subs	r2, r2, r5
 8005c8e:	6122      	str	r2, [r4, #16]
 8005c90:	f8cd a000 	str.w	sl, [sp]
 8005c94:	464b      	mov	r3, r9
 8005c96:	aa03      	add	r2, sp, #12
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	f7ff fee4 	bl	8005a68 <_printf_common>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d14a      	bne.n	8005d3a <_printf_i+0x1f6>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	b004      	add	sp, #16
 8005caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	f043 0320 	orr.w	r3, r3, #32
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	4833      	ldr	r0, [pc, #204]	; (8005d84 <_printf_i+0x240>)
 8005cb8:	2778      	movs	r7, #120	; 0x78
 8005cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	6829      	ldr	r1, [r5, #0]
 8005cc2:	061f      	lsls	r7, r3, #24
 8005cc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cc8:	d402      	bmi.n	8005cd0 <_printf_i+0x18c>
 8005cca:	065f      	lsls	r7, r3, #25
 8005ccc:	bf48      	it	mi
 8005cce:	b2b6      	uxthmi	r6, r6
 8005cd0:	07df      	lsls	r7, r3, #31
 8005cd2:	bf48      	it	mi
 8005cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005cd8:	6029      	str	r1, [r5, #0]
 8005cda:	bf48      	it	mi
 8005cdc:	6023      	strmi	r3, [r4, #0]
 8005cde:	b91e      	cbnz	r6, 8005ce8 <_printf_i+0x1a4>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	f023 0320 	bic.w	r3, r3, #32
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	2310      	movs	r3, #16
 8005cea:	e7a7      	b.n	8005c3c <_printf_i+0xf8>
 8005cec:	4824      	ldr	r0, [pc, #144]	; (8005d80 <_printf_i+0x23c>)
 8005cee:	e7e4      	b.n	8005cba <_printf_i+0x176>
 8005cf0:	4615      	mov	r5, r2
 8005cf2:	e7bd      	b.n	8005c70 <_printf_i+0x12c>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	6826      	ldr	r6, [r4, #0]
 8005cf8:	6961      	ldr	r1, [r4, #20]
 8005cfa:	1d18      	adds	r0, r3, #4
 8005cfc:	6028      	str	r0, [r5, #0]
 8005cfe:	0635      	lsls	r5, r6, #24
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	d501      	bpl.n	8005d08 <_printf_i+0x1c4>
 8005d04:	6019      	str	r1, [r3, #0]
 8005d06:	e002      	b.n	8005d0e <_printf_i+0x1ca>
 8005d08:	0670      	lsls	r0, r6, #25
 8005d0a:	d5fb      	bpl.n	8005d04 <_printf_i+0x1c0>
 8005d0c:	8019      	strh	r1, [r3, #0]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6123      	str	r3, [r4, #16]
 8005d12:	4615      	mov	r5, r2
 8005d14:	e7bc      	b.n	8005c90 <_printf_i+0x14c>
 8005d16:	682b      	ldr	r3, [r5, #0]
 8005d18:	1d1a      	adds	r2, r3, #4
 8005d1a:	602a      	str	r2, [r5, #0]
 8005d1c:	681d      	ldr	r5, [r3, #0]
 8005d1e:	6862      	ldr	r2, [r4, #4]
 8005d20:	2100      	movs	r1, #0
 8005d22:	4628      	mov	r0, r5
 8005d24:	f7fa fa64 	bl	80001f0 <memchr>
 8005d28:	b108      	cbz	r0, 8005d2e <_printf_i+0x1ea>
 8005d2a:	1b40      	subs	r0, r0, r5
 8005d2c:	6060      	str	r0, [r4, #4]
 8005d2e:	6863      	ldr	r3, [r4, #4]
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	2300      	movs	r3, #0
 8005d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d38:	e7aa      	b.n	8005c90 <_printf_i+0x14c>
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4640      	mov	r0, r8
 8005d42:	47d0      	blx	sl
 8005d44:	3001      	adds	r0, #1
 8005d46:	d0ad      	beq.n	8005ca4 <_printf_i+0x160>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	079b      	lsls	r3, r3, #30
 8005d4c:	d413      	bmi.n	8005d76 <_printf_i+0x232>
 8005d4e:	68e0      	ldr	r0, [r4, #12]
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	4298      	cmp	r0, r3
 8005d54:	bfb8      	it	lt
 8005d56:	4618      	movlt	r0, r3
 8005d58:	e7a6      	b.n	8005ca8 <_printf_i+0x164>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	4649      	mov	r1, r9
 8005d60:	4640      	mov	r0, r8
 8005d62:	47d0      	blx	sl
 8005d64:	3001      	adds	r0, #1
 8005d66:	d09d      	beq.n	8005ca4 <_printf_i+0x160>
 8005d68:	3501      	adds	r5, #1
 8005d6a:	68e3      	ldr	r3, [r4, #12]
 8005d6c:	9903      	ldr	r1, [sp, #12]
 8005d6e:	1a5b      	subs	r3, r3, r1
 8005d70:	42ab      	cmp	r3, r5
 8005d72:	dcf2      	bgt.n	8005d5a <_printf_i+0x216>
 8005d74:	e7eb      	b.n	8005d4e <_printf_i+0x20a>
 8005d76:	2500      	movs	r5, #0
 8005d78:	f104 0619 	add.w	r6, r4, #25
 8005d7c:	e7f5      	b.n	8005d6a <_printf_i+0x226>
 8005d7e:	bf00      	nop
 8005d80:	08005ec5 	.word	0x08005ec5
 8005d84:	08005ed6 	.word	0x08005ed6

08005d88 <memmove>:
 8005d88:	4288      	cmp	r0, r1
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	eb01 0402 	add.w	r4, r1, r2
 8005d90:	d902      	bls.n	8005d98 <memmove+0x10>
 8005d92:	4284      	cmp	r4, r0
 8005d94:	4623      	mov	r3, r4
 8005d96:	d807      	bhi.n	8005da8 <memmove+0x20>
 8005d98:	1e43      	subs	r3, r0, #1
 8005d9a:	42a1      	cmp	r1, r4
 8005d9c:	d008      	beq.n	8005db0 <memmove+0x28>
 8005d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005da2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005da6:	e7f8      	b.n	8005d9a <memmove+0x12>
 8005da8:	4402      	add	r2, r0
 8005daa:	4601      	mov	r1, r0
 8005dac:	428a      	cmp	r2, r1
 8005dae:	d100      	bne.n	8005db2 <memmove+0x2a>
 8005db0:	bd10      	pop	{r4, pc}
 8005db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dba:	e7f7      	b.n	8005dac <memmove+0x24>

08005dbc <_sbrk_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d06      	ldr	r5, [pc, #24]	; (8005dd8 <_sbrk_r+0x1c>)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	f7fc fb90 	bl	80024ec <_sbrk>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_sbrk_r+0x1a>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_sbrk_r+0x1a>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	20000314 	.word	0x20000314

08005ddc <memcpy>:
 8005ddc:	440a      	add	r2, r1
 8005dde:	4291      	cmp	r1, r2
 8005de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005de4:	d100      	bne.n	8005de8 <memcpy+0xc>
 8005de6:	4770      	bx	lr
 8005de8:	b510      	push	{r4, lr}
 8005dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005df2:	4291      	cmp	r1, r2
 8005df4:	d1f9      	bne.n	8005dea <memcpy+0xe>
 8005df6:	bd10      	pop	{r4, pc}

08005df8 <_realloc_r>:
 8005df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	4614      	mov	r4, r2
 8005e00:	460e      	mov	r6, r1
 8005e02:	b921      	cbnz	r1, 8005e0e <_realloc_r+0x16>
 8005e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e08:	4611      	mov	r1, r2
 8005e0a:	f7ff bc49 	b.w	80056a0 <_malloc_r>
 8005e0e:	b92a      	cbnz	r2, 8005e1c <_realloc_r+0x24>
 8005e10:	f7ff fbda 	bl	80055c8 <_free_r>
 8005e14:	4625      	mov	r5, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e1c:	f000 f81b 	bl	8005e56 <_malloc_usable_size_r>
 8005e20:	4284      	cmp	r4, r0
 8005e22:	4607      	mov	r7, r0
 8005e24:	d802      	bhi.n	8005e2c <_realloc_r+0x34>
 8005e26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e2a:	d812      	bhi.n	8005e52 <_realloc_r+0x5a>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4640      	mov	r0, r8
 8005e30:	f7ff fc36 	bl	80056a0 <_malloc_r>
 8005e34:	4605      	mov	r5, r0
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d0ed      	beq.n	8005e16 <_realloc_r+0x1e>
 8005e3a:	42bc      	cmp	r4, r7
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4631      	mov	r1, r6
 8005e40:	bf28      	it	cs
 8005e42:	463a      	movcs	r2, r7
 8005e44:	f7ff ffca 	bl	8005ddc <memcpy>
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	f7ff fbbc 	bl	80055c8 <_free_r>
 8005e50:	e7e1      	b.n	8005e16 <_realloc_r+0x1e>
 8005e52:	4635      	mov	r5, r6
 8005e54:	e7df      	b.n	8005e16 <_realloc_r+0x1e>

08005e56 <_malloc_usable_size_r>:
 8005e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e5a:	1f18      	subs	r0, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	bfbc      	itt	lt
 8005e60:	580b      	ldrlt	r3, [r1, r0]
 8005e62:	18c0      	addlt	r0, r0, r3
 8005e64:	4770      	bx	lr
	...

08005e68 <_init>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	bf00      	nop
 8005e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6e:	bc08      	pop	{r3}
 8005e70:	469e      	mov	lr, r3
 8005e72:	4770      	bx	lr

08005e74 <_fini>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	bf00      	nop
 8005e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	469e      	mov	lr, r3
 8005e7e:	4770      	bx	lr
